{"version":3,"sources":["reducer.js","components/TrendChart/TrendChart.jsx","components/TrendChart/TrendChartContainer.jsx","components/MainData/MainData.jsx","components/HeatMap/HeatMapPopup.jsx","components/HeatMap/HeatMap.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["initialState","darkMode","timseriesData","lastUpdateData","state","action","type","TrendChart","props","time","confirmed","recovered","deaths","ref","useRef","useEffect","confirmedLabel","recoveredLabel","deathLabel","total","yMax","Math","max","tickVal","yRange","c3","generate","bindto","current","title","text","positiion","padding","left","top","right","bottom","data","x","columns","types","colors","point","show","axis","tick","count","values","format","multiline","y","min","toFixed","tooltip","_","idx","position","width","height","element","className","TrendChartContainer","useState","isLoading","setIsLoading","timeSeries","setTimeSeries","Meta","Card","cTimeSeries","usTimeSeries","globTimeSeries","databuf","usData","globData","Promise","all","map","u","fetch","then","res","json","features","Error","cData","Confirmed","Recovered","Deaths","i","length","attributes","Country_Region","Object","assign","catch","e","console","log","handleResLastUpdate","slice","forEach","r","t","Papa","parse","complete","searchUs","arr","situation","a","parseInt","csvData","split","unshift","pop","join","Array","fill","dLen","batch","glob","us","c","handleResTimeSeries","justify","span","loading","description","MainData","setData","Content","Layout","Global","China","USA","active","effect","autoplay","dotPosition","keys","k","dk","value","HeatMapPopup","sdata","renderData","lastConfirmed","lastRecovered","lastDeaths","bodyStyle","province","country","Date","lastUpdated","toLocaleString","name","mode","marker","color","layout","showlegend","margin","l","b","plot_bgcolor","paper_bgcolor","xaxis","showticklabels","config","displayModeBar","HeatMap","undefined","curCoor","setCurCoor","setSdata","setRenderData","getColor","popup","Overlay","document","getElementById","autoPan","autoPanAnimation","duration","showFeatureStats","feature","coor","showPopup","get","properties","confirmedCounts","recoveredCounts","deathsCounts","d","push","replace","calculateStats","stats","lastIndex","setPosition","Map","target","layers","Group","openInLayerSwitcher","Tile","baseLayer","source","OSM","Vector","VectorSource","GeoJSON","url","style","resolution","radiusFactor","log10","maxResolution","confirmedRadius","recoveredRadius","sqrt","deathsRadius","Style","image","Circle","radius","Fill","createStyle","view","View","center","fromLonLat","zoom","overlays","getView","getResolution","on","evt","getTargetElement","cursor","hasFeatureAtPixel","pixel","forEachFeatureAtPixel","window","location","hash","getId","coordinate","id","App","Header","Footer","store","createStore","reducer","offset","href","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.08794446.chunk.js","sourcesContent":["const initialState = {\n  darkMode: false,\n  timseriesData: {},\n  lastUpdateData: {},\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case 'TOGGLE_MODE':\n      return {\n        ...state,\n        darkMode: !state.darkMode\n      }\n    case 'UPDATE_TIMESERIES_DATA':\n      return {\n        ...state,\n        timseriesData: action.timseriesData\n      }\n    case 'UPDATE_LASTUPDATE_DATA':\n      return {\n        ...state,\n        lastUpdateData: action.lastUpdateData\n      }\n    default:\n      return state\n  }\n}\n","import React, { useEffect, useRef } from 'react';\nimport c3 from 'c3';\nimport './TrendChart.scss';\n\nconst TrendChart = props => {\n  const {\n    time,\n    confirmed,\n    recovered,\n    deaths,\n  } = props;\n  const ref = useRef();\n  useEffect(() => {\n    const confirmedLabel = 'Confirmed';\n    const recoveredLabel = 'Recovered';\n    const deathLabel = 'Deaths';\n    const total = [...confirmed, ...recovered, ...deaths]\n    const tmpMax = Math.max(...total);\n    let yMax = tmpMax;\n    while (yMax % 1000 !== 0) {\n      yMax += 1;\n    }\n    const tickVal = yMax / 4;\n    const yRange = [0, tickVal, tickVal*2, tickVal*3, yMax];\n    const tickFormatter = x => (x%250 === 0 && x !== 0? `${(x/1000).toFixed(2)}k` : `${x}`);\n    c3.generate({\n      bindto: ref.current,\n      title: {\n        text: 'Global TimeSeries',\n        positiion: 'top-center',\n      },\n      padding: {\n        left: 50,\n        top: 10,\n        right: 16,\n        bottom: -10,\n      },\n      data: {\n        x: 'x',\n        columns: [\n          ['x', ...time],\n          [confirmedLabel, ...confirmed],\n          [recoveredLabel, ...recovered],\n          [deathLabel, ...deaths],\n        ],\n        types: {\n          [confirmedLabel]: 'line',\n          [recoveredLabel]: 'line',\n          [deathLabel]: 'line',\n        },\n        colors: {\n          [confirmedLabel]: '#FF6E6D',\n          [recoveredLabel]: '#66B46A',\n          [deathLabel]: '#606060',\n        },\n      },\n      point: {\n        show: false,\n      },\n      axis: {\n        x: {\n          type: 'timeseries',\n          tick: {\n            count: 2,\n            values: ['2020-02-01', '2020-03-01'],\n            format: '%b',\n            multiline: false,\n          },\n        },\n        y: {\n          type: 'linear',\n          min: 0,\n          max: yMax,\n          padding: {\n            bottom: 0,\n            top: 0,\n          },\n          tick: {\n            count: 5,\n            values: yRange,\n            format: tickFormatter,\n          },\n        },\n      },\n      tooltip: {\n        format: {\n          title: (_, idx) => time[idx],\n        },\n        position(data, width, height, element) {\n          return {\n            top: 25,\n            left: 55,\n          };\n        },\n      },\n    });\n  }, [time, confirmed, recovered, deaths]);\n\n  return (\n    <div className='trend-chart' ref={ref} />\n  )\n}\n\nexport default TrendChart;","import React, { useState, useEffect } from 'react';\nimport Papa from 'papaparse';\nimport { batch } from 'react-redux';\nimport { Card, Row, Col } from 'antd';\nimport TrendChart from './TrendChart';\n\n\nconst TrendChartContainer = props => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [timeSeries, setTimeSeries] = useState({});\n  const { Meta } = Card;\n  useEffect(() => {\n    const urls = [\n      'https://services1.arcgis.com/0MSEUqKaxRlEPj5g/ArcGIS/rest/services/ncov_cases/FeatureServer/2/query?where=1%3D1&outFields=*&f=json',\n      'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv',\n      'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Recovered.csv',\n      'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Deaths.csv'\n    ];\n    const cTimeSeries = {\n      time: [],\n      confirmed: [],\n      recovered: [],\n      deaths: [],\n    };\n    const usTimeSeries = {\n      time: [],\n      confirmed: [],\n      recovered: [],\n      deaths: [],\n    };\n    const globTimeSeries = {\n      time: [],\n      confirmed: [],\n      recovered: [],\n      deaths: [],\n    }\n    const databuf = {\n      usData: {},\n      globData: {},\n    };\n    const handleResLastUpdate = res => {\n      res.json().then(json => {\n        if (!json.features) {\n          throw new Error('error fetch data');\n        }\n        let usData = {};\n        let cData = {};\n        const globData = {\n          Confirmed: 0,\n          Recovered: 0,\n          Deaths: 0,\n        };\n        for (let i = 0; i < json.features.length; i += 1) {\n          if (json.features[i].attributes && json.features[i].attributes.Country_Region === 'US') {\n            usData = Object.assign({}, (json.features[i].attributes));\n          }\n          if (json.features[i].attributes && json.features[i].attributes.Country_Region === 'China') {\n            cData = Object.assign({}, (json.features[i].attributes));\n          }\n          globData.Confirmed += json.features[i].attributes.Confirmed;\n          globData.Recovered += json.features[i].attributes.Recovered;\n          globData.Deaths += json.features[i].attributes.Deaths;\n        }\n        databuf.usData = Object.assign({}, usData);\n        databuf.globData = Object.assign({}, globData);\n        databuf.cData = Object.assign({}, cData);\n      }).catch(e => {\n        console.log(e);\n      });\n    }\n    const handleResTimeSeries = res => {\n      const searchUs = (arr, situation, idx) => {\n        arr.forEach(a => {\n          if (a[1] === 'US') {\n            usTimeSeries[situation][idx] += parseInt(a[idx + 4]);\n          }\n          if (a[1] === 'China') {\n            cTimeSeries[situation][idx] += parseInt(a[idx + 4]);\n          }\n          globTimeSeries[situation][idx] += parseInt(a[idx + 4]);\n        });\n      }\n      const { csvData, idx } = res;\n      if (globTimeSeries.time.length === 0) {\n        const time = csvData[0].slice(4).map(t => {\n          const arr = t.split('/');\n          arr.unshift(`20${arr.pop()}`);\n          return arr.join('-');\n        })\n        cTimeSeries.time = [...time];\n        cTimeSeries.confirmed = new Array(cTimeSeries.time.length).fill(0)\n        cTimeSeries.recovered = new Array(cTimeSeries.time.length).fill(0)\n        cTimeSeries.deaths = new Array(cTimeSeries.time.length).fill(0)\n        usTimeSeries.time = [...time];\n        usTimeSeries.confirmed = new Array(usTimeSeries.time.length).fill(0)\n        usTimeSeries.recovered = new Array(usTimeSeries.time.length).fill(0)\n        usTimeSeries.deaths = new Array(usTimeSeries.time.length).fill(0)\n        globTimeSeries.time = [...time];\n        globTimeSeries.confirmed = new Array(globTimeSeries.time.length).fill(0)\n        globTimeSeries.recovered = new Array(globTimeSeries.time.length).fill(0)\n        globTimeSeries.deaths = new Array(globTimeSeries.time.length).fill(0)\n      }\n      if (idx === 0) {\n        globTimeSeries.time.forEach((_, i) => searchUs(csvData, 'confirmed', i));\n      } else if (idx === 1) {\n        globTimeSeries.time.forEach((_, i) => searchUs(csvData, 'recovered', i));\n      } else {\n        globTimeSeries.time.forEach((_, i) => searchUs(csvData, 'deaths', i));\n        const dLen = globTimeSeries.confirmed.length;\n        globTimeSeries.confirmed[dLen - 1] = databuf.globData.Confirmed;\n        globTimeSeries.recovered[dLen - 1] = databuf.globData.Recovered;\n        globTimeSeries.deaths[dLen - 1] = databuf.globData.Deaths;\n        cTimeSeries.confirmed[dLen - 1] = databuf.cData.Confirmed;\n        cTimeSeries.recovered[dLen - 1] = databuf.cData.Recovered;\n        cTimeSeries.deaths[dLen - 1] = databuf.cData.Deaths;\n        usTimeSeries.confirmed[dLen - 1] = databuf.usData.Confirmed;\n        usTimeSeries.recovered[dLen - 1] = databuf.usData.Recovered;\n        usTimeSeries.deaths[dLen - 1] = databuf.usData.Deaths;\n        batch(() => {\n          setIsLoading(false);\n          setTimeSeries({\n            glob: globTimeSeries,\n            us: usTimeSeries,\n            c: cTimeSeries\n          });\n        });\n      }\n    }\n\n    Promise.all(urls.map(u => fetch(u))).then(res => {\n      handleResLastUpdate(res[0]);\n      res.slice(1, 4).forEach((r, i) => {\n        r.text().then(t => {\n          Papa.parse(t, {\n            complete: e => handleResTimeSeries({ csvData: e.data, idx: i }),\n          });\n        }).catch(e => console.log(e));\n      });\n    });\n  }, []);\n  return (\n    <Row justify='space-between'>\n      <Col span={8}>\n        <Card\n          loading={isLoading}\n        >\n          <Meta\n            title='Global Case TimeSeries'\n            description={<TrendChart {...timeSeries.glob} />}\n          />\n        </Card>\n      </Col>\n      <Col span={8}>\n        <Card\n          loading={isLoading}\n        >\n          <Meta\n            title='China Case TimeSeries'\n            description={<TrendChart {...timeSeries.c} />}\n          />\n        </Card>\n      </Col>\n      <Col span={8} className='float-right'>\n        <Card\n          loading={isLoading}\n        >\n          <Meta\n            title='US Case TimeSeries'\n            description={<TrendChart {...timeSeries.us} />}\n          />\n        </Card>\n      </Col>\n\n    </Row>\n  );\n}\n\nexport default TrendChartContainer;","import React, { useState, useEffect } from 'react';\nimport { Layout, Row, Col, Statistic, Card, Skeleton, Carousel } from 'antd';\nimport { batch } from 'react-redux';\nimport './MainData.scss';\n\nconst MainData = props => {\n  const [data, setData] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const { Content } = Layout;\n  const { Meta } = Card;\n  useEffect(() => {\n    const url = 'https://services1.arcgis.com/0MSEUqKaxRlEPj5g/ArcGIS/rest/services/ncov_cases/FeatureServer/2/query?where=1%3D1&outFields=*&f=json';\n    fetch(url).then(res => {\n      res.json().then(json => {\n        if (!json.features) {\n          throw new Error('error fetch data');\n        }\n        let usData = {};\n        let cData = {};\n        const globData = {\n          Confirmed: 0,\n          Recovered: 0,\n          Deaths: 0,\n        };\n        for (let i = 0; i < json.features.length; i += 1) {\n          if (json.features[i].attributes && json.features[i].attributes.Country_Region === 'US') {\n            usData = Object.assign({}, (json.features[i].attributes));\n          }\n          if (json.features[i].attributes && json.features[i].attributes.Country_Region === 'China') {\n            cData = Object.assign({}, (json.features[i].attributes));\n          }\n          globData.Confirmed += json.features[i].attributes.Confirmed;\n          globData.Recovered += json.features[i].attributes.Recovered;\n          globData.Deaths += json.features[i].attributes.Deaths;\n        }\n        batch(() => {\n          setData({\n            Global: globData,\n            China: {\n              Confirmed: cData.Confirmed,\n              Recovered: cData.Recovered,\n              Deaths: cData.Deaths,\n            },\n            USA: {\n              Confirmed: usData.Confirmed,\n              Recovered: usData.Recovered,\n              Deaths: usData.Deaths,\n            }\n          });\n          setIsLoading(false);\n        })\n      }).catch(e => {\n        console.log(e);\n      });\n    });\n  }, []);\n\n  return (\n    <Skeleton loading={isLoading} active>\n      <Content className='main-data'>\n        <Carousel effect='fade' autoplay dotPosition='bottom'>\n          {Object.keys(data).map(k => (\n            <Card>\n              <Meta\n                title={<h1>{k}</h1>}\n                description={\n                  <Row>\n                    {Object.keys(data[k]).map(dk => (\n                      <Col span={8} className='text-center'>\n                        <Statistic\n                          title={<h1>{dk}</h1>}\n                          value={data[k][dk]}\n                        />\n                      </Col>\n                    ))}\n                  </Row>\n                } />\n            </Card>\n          ))}\n        </Carousel>\n      </Content>\n    </Skeleton>\n  );\n}\n\nexport default MainData;","import React from 'react';\nimport { Card } from 'antd';\nimport Plot from 'react-plotly.js';\n\nconst HeatMapPopup = props => {\n  const { sdata, renderData: {\n    lastConfirmed,\n    lastRecovered,\n    lastDeaths,\n  } } = props;\n  const { Meta } = Card;\n\n  return (\n    <Card\n      bodyStyle={{ padding: '0 15px' }}\n    >\n      <Meta\n        title={sdata.province ? `${sdata.province}, ${sdata.country}` : sdata.country}\n        description={\n          <div>\n            <h6>Lastest Update:</h6>\n            <h6>{`${new Date(sdata.lastUpdated).toLocaleString()}`}</h6>\n            {lastConfirmed ? <h5>{`Confirmed: ${lastConfirmed.toLocaleString()}`}</h5> : null}\n            {lastRecovered ? <h5>{`Recoverd: ${lastRecovered.toLocaleString()}`}</h5> : null}\n            {lastDeaths ? <h5>{`Deaths: ${lastDeaths.toLocaleString()}`}</h5> : null}\n            <Plot\n              data={[\n                {\n                  x: [...sdata.time],\n                  y: [...sdata.confirmed],\n                  name: 'Confirmed',\n                  type: 'scatter',\n                  mode: 'lines',\n                  marker: { color: '#FF6E6D' },\n                },\n                {\n                  x: [...sdata.time],\n                  y: [...sdata.recovered],\n                  name: 'Recovered',\n                  type: 'scatter',\n                  mode: 'lines',\n                  marker: { color: '#66B46A' },\n                },\n                {\n                  x: [...sdata.time],\n                  y: [...sdata.deaths],\n                  name: 'Deaths',\n                  type: 'scatter',\n                  mode: 'lines',\n                  marker: { color: '#606060' },\n                },\n              ]}\n              layout={{\n                width: 200,\n                height: 200,\n                showlegend: false,\n                margin: {\n                  l: 30,\n                  t: 10,\n                  r: 10,\n                  b: 24,\n                },\n                plot_bgcolor: '#f0f2f5',\n                paper_bgcolor: '#f0f2f5',\n                xaxis: {\n                  showticklabels: false,\n                },\n              }}\n              config={{\n                displayModeBar: false,\n              }}\n            />\n          </div>\n        }\n      />\n    </Card>\n  );\n}\n\nexport default HeatMapPopup;","import React, { useState, useEffect } from 'react';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { Tile, Group, Vector } from 'ol/layer';\nimport { OSM, Vector as VectorSource } from 'ol/source';\nimport { Circle, Fill, Style } from 'ol/style';\nimport Overlay from 'ol/Overlay';\nimport { fromLonLat } from 'ol/proj';\nimport { batch } from 'react-redux';\nimport MapPopup from './HeatMapPopup';\nimport { Card } from 'antd';\n\nimport './HeatMap.scss';\n\nconst HeatMap = props => {\n  const [curCoor, setCurCoor] = useState(undefined);\n  const [sdata, setSdata] = useState({});\n  const [renderData, setRenderData] = useState('');\n  const { Meta } = Card;\n  useEffect(() => {\n    const getColor = {\n      deaths: 'rgb(0,0,0, 0.5)',\n      recovered: 'rgb(0,255,0, 0.3)',\n      confirmed: 'rgb(255,0,0, 0.3)',\n    };\n    const popup = new Overlay({\n      element: document.getElementById('map-popup'),\n      autoPan: true,\n      autoPanAnimation: {\n        duration: 250\n      }\n    });\n    const createStyle = (feature, resolution) => {\n      const radiusFactor = Math.log10(maxResolution / resolution) * 0.5 + 1;\n      // const country = feature.get('country');\n      // const province = feature.get('province');\n\n      const lastIndex = feature.get('confirmed').length - 1;\n      const confirmed = feature.get('confirmed')[lastIndex].count;\n      const recovered = feature.get('recovered')[lastIndex].count;\n      const deaths = feature.get('deaths')[lastIndex].count;\n\n      let confirmedRadius = Math.log10(confirmed + 1) * 10;\n      let recoveredRadius = Math.sqrt((recovered + deaths) / confirmed) * confirmedRadius;\n      let deathsRadius = Math.sqrt(deaths / confirmed) * confirmedRadius;\n      confirmedRadius *= radiusFactor;\n      recoveredRadius *= radiusFactor;\n      deathsRadius *= radiusFactor;\n      return [\n        new Style({\n          image: new Circle({\n            radius: confirmedRadius,\n            fill: new Fill({\n              color: getColor['confirmed']\n            })\n          })\n        }),\n        new Style({\n          image: new Circle({\n            radius: recoveredRadius,\n            fill: new Fill({\n              color: getColor['recovered']\n            })\n          })\n        }),\n        new Style({\n          image: new Circle({\n            radius: deathsRadius,\n            fill: new Fill({\n              color: getColor['deaths']\n            })\n          })\n        })\n      ];\n    }\n    const calculateStats = (feature, all = false) => {\n      const country = feature.get ? feature.get('country') : feature.properties.country;\n      const province = feature.get ? feature.get('province') : feature.properties.province;\n      const confirmed = feature.get ? feature.get('confirmed') : feature.properties.confirmed;\n      const recovered = feature.get ? feature.get('recovered') : feature.properties.recovered;\n      const deaths = feature.get ? feature.get('deaths') : feature.properties.deaths;\n      const time = [];\n      const confirmedCounts = [];\n      const recoveredCounts = [];\n      const deathsCounts = [];\n\n      for (let i = 0; i <= confirmed.length - 1; i++) {\n        const c = confirmed[i].count;\n        const r = recovered[i].count;\n        const d = deaths[i].count;\n        if (all || time.length || c || r || d) {\n          time.push(confirmed[i].time.replace(/\\//g, '-').replace(/ .*/, ''));\n          confirmedCounts.push(c);\n          recoveredCounts.push(r);\n          deathsCounts.push(d);\n        }\n      }\n\n      return {\n        country: country,\n        province: province,\n        lastUpdated: Date.parse(confirmed[confirmed.length - 1].time),\n        time: time,\n        confirmed: confirmedCounts,\n        recovered: recoveredCounts,\n        deaths: deathsCounts\n      };\n    };\n\n    const showFeatureStats = (feature, coor) => {\n      showPopup(calculateStats(feature), coor);\n    };\n\n    const showPopup = (stats, coor) => {\n      const lastIndex = stats.confirmed.length - 1;\n      const lastConfirmed = stats.confirmed[lastIndex];\n      const lastRecovered = stats.recovered[lastIndex];\n      const lastDeaths = stats.deaths[lastIndex];\n      batch(() => {\n        setCurCoor(coor);\n        setSdata(stats);\n        setRenderData({\n          lastConfirmed,\n          lastRecovered,\n          lastDeaths,\n        });\n      });\n      popup.setPosition(coor);\n    }\n\n    const map = new Map({\n      target: 'map',\n      layers: [\n        new Group({\n          title: 'Base maps',\n          openInLayerSwitcher: true,\n          layers: [\n            new Tile({\n              title: 'Open Street',\n              baseLayer: true,\n              source: new OSM()\n            })\n          ]\n        }),\n        new Vector({\n          title: 'COVID-19 cases',\n          source: new VectorSource({\n            format: new GeoJSON(),\n            url: 'https://raw.githubusercontent.com/HuidaeCho/covid-19/master/geodata.json',\n          }),\n          style: (feature, resolution) => {\n            return createStyle(feature, resolution);\n          }\n        })\n      ],\n      view: new View({\n        center: fromLonLat([-100, 35]),\n        zoom: 2,\n      }),\n      overlays: [popup],\n    });\n    const view = map.getView();\n    const maxResolution = view.getResolution();\n    map.on('pointermove', (evt) => {\n      map.getTargetElement().style.cursor = map.hasFeatureAtPixel(evt.pixel) ? 'pointer' : '';\n    });\n    map.on('singleclick', (evt) => {\n      const feature = map.forEachFeatureAtPixel(evt.pixel, (feature, _) => feature);\n      if (feature) {\n        window.location.hash = 'feature-' + feature.getId();\n        showFeatureStats(feature, evt.coordinate);\n      } else {\n        popup.setPosition(undefined);\n      }\n    });\n  }, []);\n\n  return (\n    <Card>\n      <Meta description={\n        <>\n          <div id='map' className='heat-map' />\n          {curCoor\n            ? <div id='map-popup' className='ol-popup'>\n              <MapPopup sdata={sdata} coor={curCoor} renderData={renderData} />\n            </div>\n            : <div id='map-popup' />\n          }\n        </>\n      }/>\n    </Card>\n  );\n}\n\nexport default HeatMap;\n","import React from 'react';\nimport { Layout, Row, Col } from 'antd';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport reducer from './../reducer';\nimport TrendChartContainer from './TrendChart/TrendChartContainer';\nimport MainData from './MainData/MainData';\nimport HeatMap from './HeatMap/HeatMap';\nimport './App.scss';\n\nconst App = props => {\n  const { Header, Content, Footer } = Layout;\n  const store = createStore(reducer)\n\n  return (\n    <Provider store={store}>\n      <Layout id=\"app\">\n        <Header>\n          <h1 style={{ color: 'white' }}>Covid-19 Dashboard</h1>\n        </Header>\n        <Layout>\n          <Content style={{\n            padding: '0 50px',\n          }}>\n            <Row justify='center'>\n              <Col id=\"main-content\" span={20}>\n                <MainData />\n                <HeatMap />\n                <TrendChartContainer />\n              </Col>\n            </Row>\n          </Content>\n        </Layout>\n        <Footer>\n          <Row>\n            <Col offset={2}>\n              <span>Data Source</span><br />\n              <a href='https://github.com/CSSEGISandData/COVID-19'>https://github.com/CSSEGISandData/COVID-19</a>\n            </Col>\n          </Row>\n        </Footer>\n      </Layout>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}