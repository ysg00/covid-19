{"version":3,"sources":["reducer.js","components/CarouselData/CarouselData.jsx","components/OpenLayerMap/OpenLayerMapPopup.jsx","components/OpenLayerMap/OpenLayerMapSideBar.jsx","components/OpenLayerMap/OpenLayerMap.jsx","components/MainContainer.jsx","components/DataTable/DataTableChart.jsx","components/DataTable/DataTable.jsx","components/GoogleTrend/GoogleTrend.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["initialState","darkMode","isLoading","timeSeries","latestUpdate","featureIdx","features","state","action","type","CarouselData","props","Meta","Card","data","useSelector","effect","autoplay","dotPosition","map","k","key","title","description","dk","span","className","lodash","capitalize","value","increment","valueStyle","color","prefix","ArrowUpOutlined","OpenLayerMapPopup","sdata","renderData","lastConfirmed","lastRecovered","lastDeaths","bodyStyle","padding","province","country","Date","lastUpdated","toLocaleString","x","time","y","confirmed","name","mode","marker","recovered","deaths","layout","width","height","showlegend","margin","l","t","r","b","plot_bgcolor","paper_bgcolor","xaxis","showticklabels","config","displayModeBar","OpenLayerMapSideBar","arr","propGetter","obj","dLen","properties","length","count","bordered","loading","itemLayout","dataSource","sort","a","vA","vB","size","scroll","renderItem","item","Item","id","OpenLayerMap","useState","undefined","curCoor","setCurCoor","setSdata","setRenderData","useEffect","getColor","popup","Overlay","element","document","getElementById","autoPan","autoPanAnimation","duration","showFeatureStats","feature","coor","showPopup","all","get","confirmedCounts","recoveredCounts","deathsCounts","i","c","d","push","moment","format","parse","calculateStats","stats","lastIndex","batch","setPosition","geoJsonType","GeoJSON","vectorSource","VectorSource","readFeatures","featureProjection","Map","target","layers","Group","openInLayerSwitcher","Tile","baseLayer","source","OSM","Vector","style","resolution","radiusFactor","Math","log10","maxResolution","confirmedRadius","recoveredRadius","sqrt","deathsRadius","Style","image","Circle","radius","fill","Fill","createStyle","view","View","center","fromLonLat","zoom","overlays","getView","getResolution","on","evt","getTargetElement","cursor","hasFeatureAtPixel","pixel","forEachFeatureAtPixel","_","window","location","hash","getId","coordinate","MainContainer","children","rest","dispatch","useDispatch","countryIdx","timeSeriesWorldwide","lastUpdate","yesterdayData","yesterday","setDate","getDate","urls","generateData","csv","dataKey","header","slice","forEach","ii","parseInt","geometry","coordinates","parseFloat","Object","keys","assign","Array","handleResLastUpdate","res","json","then","Error","globData","f","attributes","Country_Region","Confirmed","Recovered","Deaths","Last_Update","catch","e","console","log","handleResTimeSeries","csvData","idx","worldwideInc","entries","v","Worldwide","Promise","u","fetch","text","Papa","complete","DataTableChart","ref","useRef","confirmedLabel","recoveredLabel","deathLabel","total","yMax","max","tickVal","yRange","c3","generate","bindto","current","left","top","right","bottom","columns","types","colors","point","show","axis","tick","values","multiline","min","toFixed","tooltip","position","DataTable","tableData","setTableData","Option","Select","area","timeseries","placement","content","trigger","shape","icon","SearchOutlined","showSearch","placeholder","onSelect","classNaame","dataIndex","sorter","localeCompare","sortDirections","ellipsis","pagination","GoogleTrend","searchTime","setSearchTime","searchArea","setSearchArea","handleScriptLoad","geo","keyword","trends","embed","renderExploreWidgetTo","comparisonItem","toUpperCase","category","property","exploreQuery","encodeURI","guestPath","gtTimeSeriesParent","gtGeoMapParent","removeChild","defaultValue","onChange","clist","url","onLoad","App","Header","Layout","Content","Footer","store","createStore","reducer","justify","offset","href","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.04a015ad.chunk.js","sourcesContent":["const initialState = {\n  darkMode: false,\n  isLoading: true,\n  timeSeries: {},\n  latestUpdate: {},\n  featureIdx: {},\n  features: {},\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case 'DONE_LOADING':\n      return {\n        ...state,\n        isLoading: false,\n      };\n    case 'TOGGLE_DARK_MODE':\n      return {\n        ...state,\n        darkMode: !state.darkMode,\n      };\n    case 'UPDATE_TIMESERIES':\n      return {\n        ...state,\n        timeSeries: action.timeSeries,\n      };\n    case 'UPDATE_LATESTUPDATE':\n      return {\n        ...state,\n        latestUpdate: action.latestUpdate,\n      };\n    case 'UPDATE_FEATURES':\n      return {\n        ...state,\n        features: action.features,\n      };\n    case 'UPDATE_FEATUREIDX':\n      return {\n        ...state,\n        featureIdx: action.featureIdx,\n      };\n    default:\n      return state;\n  };\n};\n","import React from 'react';\nimport { Row, Col, Statistic, Card, Carousel } from 'antd';\nimport { ArrowUpOutlined } from '@ant-design/icons';\nimport { useSelector } from 'react-redux';\nimport lodash from 'lodash';\nimport './CarouselData.scss';\n\nconst CarouselData = props => {\n  const { Meta } = Card;\n  const data = useSelector(state => state.latestUpdate);\n  const isLoading = useSelector(state => state.isLoading);\n  return (\n    <>\n        {isLoading\n          ? null\n          : <Carousel effect='fade' autoplay dotPosition='bottom'>\n            {['Worldwide', 'US', 'China'].map(k => (\n              <Card key={`data-card-${k}`}>\n                <Meta\n                  title={<h1>{k}</h1>}\n                  description={\n                    <Row>\n                      {['confirmed', 'recovered', 'deaths'].map(dk => {\n                        return (\n                          <Col span={8} className='text-center' key={`data-card-${k}-col-${dk}`}>\n                            <Statistic\n                              title={<h1>{lodash.capitalize(dk)}</h1>}\n                              value={data[k][dk]}\n                            />\n                            <Statistic\n                              className={'delta-data'}\n                              value={data[k].increment[dk]}\n                              valueStyle={{ color: dk === 'recovered' ? '#3f8600' : '#cf1322' }}\n                              prefix={<ArrowUpOutlined />}\n                            />\n                          </Col>\n                        );\n                      })}\n                    </Row>\n                  }\n                />\n              </Card>\n            ))}\n          </Carousel>\n        }\n      </>\n  );\n};\n\nexport default CarouselData;\n","import React from 'react';\nimport { Card } from 'antd';\nimport Plot from 'react-plotly.js';\n\nconst OpenLayerMapPopup = props => {\n  const { sdata, renderData: {\n    lastConfirmed,\n    lastRecovered,\n    lastDeaths,\n  } } = props;\n  const { Meta } = Card;\n\n  return (\n    <Card\n      bodyStyle={{ padding: '5px 10px' }}\n    >\n      <Meta\n        title={sdata.province ? `${sdata.province}, ${sdata.country}` : sdata.country}\n        description={\n          <div>\n            <h6>Lastest Update:</h6>\n            <h6>{`${new Date(sdata.lastUpdated).toLocaleString()}`}</h6>\n            {lastConfirmed ? <h5>{`Confirmed: ${lastConfirmed.toLocaleString()}`}</h5> : null}\n            {lastRecovered ? <h5>{`Recoverd: ${lastRecovered.toLocaleString()}`}</h5> : null}\n            {lastDeaths ? <h5>{`Deaths: ${lastDeaths.toLocaleString()}`}</h5> : null}\n            <Plot\n              data={[\n                {\n                  x: [...sdata.time],\n                  y: [...sdata.confirmed],\n                  name: 'Confirmed',\n                  type: 'scatter',\n                  mode: 'lines',\n                  marker: { color: '#FF6E6D' },\n                },\n                {\n                  x: [...sdata.time],\n                  y: [...sdata.recovered],\n                  name: 'Recovered',\n                  type: 'scatter',\n                  mode: 'lines',\n                  marker: { color: '#66B46A' },\n                },\n                {\n                  x: [...sdata.time],\n                  y: [...sdata.deaths],\n                  name: 'Deaths',\n                  type: 'scatter',\n                  mode: 'lines',\n                  marker: { color: '#606060' },\n                },\n              ]}\n              layout={{\n                width: 200,\n                height: 200,\n                showlegend: false,\n                margin: {\n                  l: 30,\n                  t: 10,\n                  r: 10,\n                  b: 24,\n                },\n                plot_bgcolor: '#f0f2f5',\n                paper_bgcolor: '#f0f2f5',\n                xaxis: {\n                  showticklabels: false,\n                },\n              }}\n              config={{\n                displayModeBar: false,\n              }}\n            />\n          </div>\n        }\n      />\n    </Card>\n  );\n}\n\nexport default OpenLayerMapPopup;","import React from 'react';\nimport { List } from 'antd';\nimport { useSelector } from 'react-redux';\n\nconst OpenLayerMapSideBar = props => {\n  const features = useSelector(state => state.features);\n  const isLoading = useSelector(state => state.isLoading);\n  const propGetter = obj => {\n    const dLen = obj.properties.confirmed.length;\n    return obj.properties.confirmed[dLen - 1].count;\n  }\n\n  const sortFeature = arr => arr.sort((a, b) => {\n    const vA = propGetter(a);\n    const vB = propGetter(b);\n    if (vA < vB) {\n        return 1;\n    } else if (vA > vB) {\n        return -1;\n    } else {\n        return 0;\n    }\n  });\n\n  return (\n    <List\n      className='data-list'\n      bordered='true'\n      loading={isLoading}\n      itemLayout='horizontal'\n      dataSource={sortFeature(features)}\n      size='small'\n      scroll={{ y: 480 }}\n      renderItem={item => {\n        const dLen = item.properties.confirmed.length;\n        const { country, province } = item.properties;\n        return (\n          <List.Item\n            id={`data-list-item-${country}-${province}`}\n          >\n            <List.Item.Meta\n              title={province === '' ? `${country}` : `${province}, ${country}`}\n              description={\n                <>\n                  <h6>\n                    {`confirmed: ${item.properties.confirmed[dLen - 1].count}`}\n                  </h6>\n                  <h6>\n                    {`recovered: ${item.properties.recovered[dLen - 1].count}`}\n                  </h6>\n                  <h6>\n                    {`deaths: ${item.properties.deaths[dLen - 1].count}`}\n                  </h6>\n                </>\n              }\n            />\n          </List.Item>\n        );\n      }}\n    />\n  );\n};\n\nexport default OpenLayerMapSideBar;\n","import React, { useState, useEffect } from 'react';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { Tile, Group, Vector } from 'ol/layer';\nimport { OSM, Vector as VectorSource } from 'ol/source';\nimport { Circle, Fill, Style } from 'ol/style';\nimport Overlay from 'ol/Overlay';\nimport { fromLonLat } from 'ol/proj';\nimport { batch, useSelector } from 'react-redux';\nimport moment from 'moment';\nimport MapPopup from './OpenLayerMapPopup';\nimport SideBar from './OpenLayerMapSideBar';\nimport { Card, Row, Col } from 'antd';\nimport './OpenLayerMap.scss';\n\nconst OpenLayerMap = props => {\n  const [curCoor, setCurCoor] = useState(undefined);\n  const [sdata, setSdata] = useState({});\n  const [renderData, setRenderData] = useState('');\n  const isLoading = useSelector(state => state.isLoading);\n  const features = useSelector(state => state.features);\n  const { Meta } = Card;\n  useEffect(() => {\n    if (!isLoading) {\n      const getColor = {\n        deaths: 'rgb(0,0,0, 0.5)',\n        recovered: 'rgb(0,255,0, 0.3)',\n        confirmed: 'rgb(255,0,0, 0.3)',\n      };\n      const popup = new Overlay({\n        element: document.getElementById('map-popup'),\n        autoPan: true,\n        autoPanAnimation: {\n          duration: 250,\n        }\n      });\n      const createStyle = (feature, resolution) => {\n        const radiusFactor = Math.log10(maxResolution / resolution) * 0.5 + 1;\n        // const country = feature.get('country');\n        // const province = feature.get('province');\n  \n        const lastIndex = feature.get('confirmed').length - 1;\n        const confirmed = feature.get('confirmed')[lastIndex].count;\n        const recovered = feature.get('recovered')[lastIndex].count;\n        const deaths = feature.get('deaths')[lastIndex].count;\n  \n        let confirmedRadius = Math.log10(confirmed + 1) * 10;\n        let recoveredRadius = Math.sqrt((recovered + deaths) / confirmed) * confirmedRadius;\n        let deathsRadius = Math.sqrt(deaths / confirmed) * confirmedRadius;\n        confirmedRadius *= radiusFactor;\n        recoveredRadius *= radiusFactor;\n        deathsRadius *= radiusFactor;\n        return [\n          new Style({\n            image: new Circle({\n              radius: confirmedRadius,\n              fill: new Fill({\n                color: getColor['confirmed']\n              }),\n            }),\n          }),\n          new Style({\n            image: new Circle({\n              radius: recoveredRadius,\n              fill: new Fill({\n                color: getColor['recovered']\n              }),\n            }),\n          }),\n          new Style({\n            image: new Circle({\n              radius: deathsRadius,\n              fill: new Fill({\n                color: getColor['deaths']\n              }),\n            }),\n          }),\n        ];\n      };\n      const calculateStats = (feature, all = false) => {\n        const country = feature.get ? feature.get('country') : feature.properties.country;\n        const province = feature.get ? feature.get('province') : feature.properties.province;\n        const confirmed = feature.get ? feature.get('confirmed') : feature.properties.confirmed;\n        const recovered = feature.get ? feature.get('recovered') : feature.properties.recovered;\n        const deaths = feature.get ? feature.get('deaths') : feature.properties.deaths;\n        const time = [];\n        const confirmedCounts = [];\n        const recoveredCounts = [];\n        const deathsCounts = [];\n  \n        for (let i = 0; i <= confirmed.length - 1; i++) {\n          const c = confirmed[i].count;\n          const r = recovered[i].count;\n          const d = deaths[i].count;\n          if (all || time.length || c || r || d) {\n            // time.push(confirmed[i].time.replace(/\\//g, '-').replace(/ .*/, ''));\n            time.push(moment(confirmed[i].time).format('YYYY-MM-DD'))\n            confirmedCounts.push(c);\n            recoveredCounts.push(r);\n            deathsCounts.push(d);\n          }\n        };\n  \n        return {\n          country: country,\n          province: province,\n          lastUpdated: Date.parse(confirmed[confirmed.length - 1].time),\n          time: time,\n          confirmed: confirmedCounts,\n          recovered: recoveredCounts,\n          deaths: deathsCounts\n        };\n      };\n  \n      const showFeatureStats = (feature, coor) => {\n        showPopup(calculateStats(feature), coor);\n      };\n  \n      const showPopup = (stats, coor) => {\n        const lastIndex = stats.confirmed.length - 1;\n        const lastConfirmed = stats.confirmed[lastIndex];\n        const lastRecovered = stats.recovered[lastIndex];\n        const lastDeaths = stats.deaths[lastIndex];\n        batch(() => {\n          setCurCoor(coor);\n          setSdata(stats);\n          setRenderData({\n            lastConfirmed,\n            lastRecovered,\n            lastDeaths,\n          });\n        });\n        popup.setPosition(coor);\n      }\n      const geoJsonType = new GeoJSON();\n      const vectorSource = new VectorSource({\n        format: geoJsonType,\n        features: geoJsonType.readFeatures({ type: 'FeatureCollection', features }, { featureProjection: 'EPSG:3857' })\n      });\n      const map = new Map({\n        target: 'map',\n        layers: [\n          new Group({\n            title: 'Base maps',\n            openInLayerSwitcher: true,\n            layers: [\n              new Tile({\n                title: 'Open Street',\n                baseLayer: true,\n                source: new OSM()\n              })\n            ]\n          }),\n          new Vector({\n            title: 'COVID-19 cases',\n            source: vectorSource,\n            style: (feature, resolution) => {\n              return createStyle(feature, resolution);\n            }\n          }),\n        ],\n        view: new View({\n          center: fromLonLat([-100, 35]),\n          zoom: 2,\n        }),\n        overlays: [popup],\n      });\n      const view = map.getView();\n      const maxResolution = view.getResolution();\n      map.on('pointermove', (evt) => {\n        map.getTargetElement().style.cursor = map.hasFeatureAtPixel(evt.pixel) ? 'pointer' : '';\n      });\n      map.on('singleclick', (evt) => {\n        const feature = map.forEachFeatureAtPixel(evt.pixel, (feature, _) => feature);\n        if (feature) {\n          window.location.hash = 'feature-' + feature.getId();\n          showFeatureStats(feature, evt.coordinate);\n        } else {\n          popup.setPosition(undefined);\n        }\n      });\n    }\n  }, [isLoading, features]);\n\n  return (\n    <Card loading={isLoading}>\n      {isLoading\n        ? null\n        : <Meta description={\n          <Row>\n            <Col span={20}>\n              <div id='map' className='open-layer-map' />\n              {curCoor\n                ? <div id='map-popup' className='ol-popup'>\n                  <MapPopup sdata={sdata} coor={curCoor} renderData={renderData} />\n                </div>\n                : <div id='map-popup' />\n              }\n            </Col>\n            <Col span={4}>\n              <SideBar />\n            </Col>\n          </Row>\n        }/>\n      }\n    </Card>\n  );\n};\n\nexport default OpenLayerMap;\n","import React, { useEffect } from 'react';\nimport { batch, useDispatch } from 'react-redux';\nimport Papa from 'papaparse';\nimport moment from 'moment';\n\nconst MainContainer = ({children, ...rest}) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    // yesterday.setDate(yesterday.getDate() - 1);\n    const features = [];\n    const featureIdx = {};\n    const countryIdx = {};\n    const timeSeries = {};\n    const timeSeriesWorldwide = {};\n    const latestUpdate = {};\n    const lastUpdate = {};\n    const yesterdayData = {};\n    const yesterday = moment(new Date().setDate(new Date().getDate() - 1)).format('MM-DD-YYYY');\n    const urls = [\n      'https://services1.arcgis.com/0MSEUqKaxRlEPj5g/ArcGIS/rest/services/ncov_cases/FeatureServer/2/query?where=1%3D1&outFields=*&f=json',\n      'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv',\n      'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Recovered.csv',\n      'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Deaths.csv',\n      `https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/${yesterday}.csv`,\n    ];\n    const generateData = (csv, dataKey) => {\n      // jhu csv header format: [province, country, lat, long, date...]\n      const header = csv[0];\n      // if (arr[1] && !(arr[1]==='US' && arr[0] && /.*, [A-Z][A-Z]\\ ?$/.test(arr[0]))){\n      csv.slice(1).forEach((arr, i) => {\n        if (arr[1]) {\n          if (features[i]) {\n            features[i].properties[dataKey] = arr.slice(4).map((count, ii) => ({\n              time: new Date(header[ii + 4]),\n              count: count === '' ? parseInt(arr[ii + 3]) : parseInt(count),\n            }));\n          } else {\n            if (countryIdx[arr[1]]) {\n              countryIdx[arr[1]].push(i);\n            } else {\n              countryIdx[arr[1]] = [i];\n            }\n            featureIdx[`${arr[1]}-${arr[0]}`] = i;\n            features.push({\n              id: i,\n              type: 'Feature',\n              geometry: {\n                type: 'Point',\n                coordinates: [parseFloat(arr[3]), parseFloat(arr[2])],\n              },\n              properties: {\n                country: arr[1],\n                province: arr[0],\n                [dataKey]: arr.slice(4).map((count, ii) => ({\n                  time: new Date(header[ii + 4]),\n                  count: count === '' ? parseInt(arr[ii + 3]) : parseInt(count),\n                })),\n              }\n            });\n          }\n          if (lastUpdate[arr[1]]) {\n            if (timeSeries[arr[1]]) {\n              if (timeSeries[arr[1]][dataKey]) {\n                timeSeries[arr[1]][dataKey].forEach((dk, ii) => {\n                  timeSeries[arr[1]][dataKey][ii] = dk + parseInt(arr[ii+4])\n                });\n              } else {\n                timeSeries[arr[1]][dataKey] = [...arr.slice(4)].map(d => parseInt(d));\n              }\n            }\n            else {\n              timeSeries[arr[1]] = {\n                time: [...header.slice(4)].map(d => new Date(d)),\n                [dataKey]: [...arr.slice(4)].map(d => parseInt(d)),\n              };\n            }\n            if (Object.keys(timeSeriesWorldwide).length) {\n              timeSeriesWorldwide[dataKey].forEach((dk, ii) => {\n                timeSeriesWorldwide[dataKey][ii] = dk + parseInt(arr[ii+4])\n              });\n            } else {\n              const dLen = arr.length-4;\n              Object.assign(timeSeriesWorldwide, {\n                time: [...header.slice(4)].map(d => new Date(d)),\n                confirmed: Array(dLen).fill(0),\n                recovered: Array(dLen).fill(0),\n                deaths: Array(dLen).fill(0),\n                [dataKey]: [...arr.slice(4)].map(d => parseInt(d)),\n              });\n            }\n          }\n        }\n      });\n    };\n\n    const handleResLastUpdate = async res => {\n      await res.json().then(json => {\n        if (!json.features) {\n          throw new Error('error fetch data');\n        }\n        const globData = {\n          confirmed: 0,\n          recovered: 0,\n          deaths: 0,\n          lastUpdate: new Date(),\n        };\n        json.features.forEach(f => {\n          lastUpdate[f.attributes.Country_Region] = {\n            confirmed: f.attributes.Confirmed,\n            recovered: f.attributes.Recovered,\n            deaths: f.attributes.Deaths,\n            lastUpdate: f.attributes.Last_Update,\n          };\n          globData.confirmed += f.attributes.Confirmed;\n          globData.recovered += f.attributes.Recovered;\n          globData.deaths += f.attributes.Deaths;\n        });\n        lastUpdate['Worldwide'] = {\n          ...globData,\n          lastUpdate: lastUpdate['US'].lastUpdate,\n        };\n      }).catch(e => console.log(e));\n    };\n    const handleResTimeSeries = res => {\n      const { csvData, idx } = res;\n      if (idx === 0) {\n        generateData(csvData, 'confirmed')\n      } else if (idx === 1) {\n        generateData(csvData, 'recovered')\n      } else if (idx === 2) {\n        generateData(csvData, 'deaths')\n      } else {\n        const worldwideInc = {\n          confirmed: 0,\n          recovered: 0,\n          deaths: 0,\n        };\n        csvData.slice(1).forEach(arr => {\n          if (arr[1]) {\n            if (yesterdayData[arr[1]]) {\n              yesterdayData[arr[1]].confirmed += parseInt(arr[3]);\n              yesterdayData[arr[1]].recovered += parseInt(arr[5]);\n              yesterdayData[arr[1]].deaths += parseInt(arr[4]);\n            } else {\n              yesterdayData[arr[1]] = {\n                confirmed: parseInt(arr[3]),\n                recovered: parseInt(arr[5]),\n                deaths: parseInt(arr[4]),\n              };\n            }\n            worldwideInc.confirmed += parseInt(arr[3]);\n            worldwideInc.recovered += parseInt(arr[5]);\n            worldwideInc.deaths += parseInt(arr[4]);\n          }\n        });\n        Object.entries(lastUpdate).forEach(([k, v]) => {\n          if (yesterdayData[k]) {\n            const { confirmed, recovered, deaths } = v;\n            latestUpdate[k] = {\n              ...v,\n              increment: {\n                confirmed: confirmed - yesterdayData[k].confirmed,\n                recovered: recovered - yesterdayData[k].recovered,\n                deaths: deaths - yesterdayData[k].deaths,\n              },\n            };    \n          }\n        });\n        latestUpdate['Worldwide'] = {\n          ...lastUpdate['Worldwide'],\n          increment: {\n            confirmed: lastUpdate.Worldwide.confirmed - worldwideInc.confirmed,\n            recovered: lastUpdate.Worldwide.recovered - worldwideInc.recovered,\n            deaths: lastUpdate.Worldwide.deaths - worldwideInc.deaths,\n          },\n        };\n        Object.assign(timeSeries, {\n          ...timeSeries,\n          Worldwide: timeSeriesWorldwide,\n        });\n        Object.keys(timeSeries).forEach(k => {\n          if (latestUpdate[k]) {\n            const dLen = timeSeries[k].confirmed.length;\n            timeSeries[k].confirmed[dLen-1] = latestUpdate[k].confirmed;\n            timeSeries[k].recovered[dLen-1] = latestUpdate[k].recovered;\n            timeSeries[k].deaths[dLen-1] = latestUpdate[k].deaths;\n          } else {\n            delete timeSeries[k];\n          }\n\n        });\n        batch(() => {\n          dispatch({ type: 'UPDATE_TIMESERIES', timeSeries: {\n            ...timeSeries,\n            Worldwide: timeSeriesWorldwide,\n          }});\n          dispatch({ type: 'UPDATE_LATESTUPDATE', latestUpdate });\n          dispatch({ type: 'UPDATE_FEATURES', features });\n          dispatch({ type: 'UPDATE_FEATUREIDX', featureIdx });\n        });\n        dispatch({ type: 'DONE_LOADING'});\n      }\n    };\n\n    Promise.all(urls.map(u => fetch(u))).then(res => {\n      handleResLastUpdate(res[0]);\n      res.slice(1).forEach(async (r, i) => {\n        await r.text().then(t => {\n          Papa.parse(t, {\n            complete: e => handleResTimeSeries({ csvData: e.data, idx: i }),\n          });\n        }).catch(e => console.log(e));\n      });\n    }).catch(e => console.log(e));\n  }, [dispatch]);\n  return (\n    <div {...rest}>\n      {children}\n    </div>\n  );\n};\n\nexport default MainContainer;\n","import React, { useEffect, useRef } from 'react';\nimport c3 from 'c3';\nimport moment from 'moment';\n// import './TrendChart.scss';\n\nconst DataTableChart = props => {\n  const {\n    time,\n    confirmed,\n    recovered,\n    deaths,\n  } = props;\n  const ref = useRef();\n  useEffect(() => {\n    const confirmedLabel = 'Confirmed';\n    const recoveredLabel = 'Recovered';\n    const deathLabel = 'Deaths';\n    const total = [...confirmed, ...recovered, ...deaths]\n    const tmpMax = Math.max(...total);\n    let yMax = tmpMax;\n    while (yMax % 1000 !== 0) {\n      yMax += 1;\n    }\n    const tickVal = yMax / 4;\n    const yRange = [0, tickVal, tickVal*2, tickVal*3, yMax];\n    const tickFormatter = x => (x%250 === 0 && x !== 0? `${(x/1000).toFixed(2)}k` : `${x}`);\n    c3.generate({\n      bindto: ref.current,\n      padding: {\n        left: 50,\n        top: 10,\n        right: 16,\n        bottom: -10,\n      },\n      data: {\n        x: 'x',\n        columns: [\n          ['x', ...time],\n          [confirmedLabel, ...confirmed],\n          [recoveredLabel, ...recovered],\n          [deathLabel, ...deaths],\n        ],\n        types: {\n          [confirmedLabel]: 'line',\n          [recoveredLabel]: 'line',\n          [deathLabel]: 'line',\n        },\n        colors: {\n          [confirmedLabel]: '#FF6E6D',\n          [recoveredLabel]: '#66B46A',\n          [deathLabel]: '#606060',\n        },\n      },\n      point: {\n        show: false,\n      },\n      axis: {\n        x: {\n          type: 'timeseries',\n          tick: {\n            count: 2,\n            values: ['2020-02-01', '2020-03-01'],\n            format: '%b',\n            multiline: false,\n          },\n        },\n        y: {\n          type: 'linear',\n          min: 0,\n          max: yMax,\n          padding: {\n            bottom: 0,\n            top: 0,\n          },\n          tick: {\n            count: 5,\n            values: yRange,\n            format: tickFormatter,\n          },\n        },\n      },\n      tooltip: {\n        format: {\n          title: (_, idx) => moment(time[idx]).format('YYYY-MM-DD'),\n        },\n        position(data, width, height, element) {\n          return {\n            top: 25,\n            left: 55,\n          };\n        },\n      },\n    });\n  }, [time, confirmed, recovered, deaths]);\n\n  return (\n    <div className='trend-chart' ref={ref} />\n  );\n};\n\nexport default DataTableChart;","import React, { useState, useEffect } from 'react';\nimport { Table, Card, Popover, Button, Select, Row, Col } from 'antd';\nimport { SearchOutlined } from '@ant-design/icons';\nimport { useSelector, batch } from 'react-redux';\nimport moment from 'moment';\nimport DataTableChart from './DataTableChart';\n\nimport './DataTable.scss';\n\nconst DataTable = props => {\n  const latestUpdate = useSelector(state => state.latestUpdate);\n  const isLoading = useSelector(state => state.isLoading);\n  const timeSeries = useSelector(state => state.timeSeries);\n  const [tableData, setTableData] = useState([]);\n  const [renderData, setRenderData] = useState([]);\n  const { Meta } = Card;\n  const { Option } = Select;\n\n  const columns = [\n    {\n      title: 'Area',\n      dataIndex: 'area',\n      key: 'area',\n      sorter: (a, b) => a.area.localeCompare(b.area),\n      sortDirections: ['ascend', 'descend'],\n      ellipsis: true,\n      className: 'table-column',\n    },\n    {\n      title: 'Confirmed',\n      dataIndex: 'confirmed',\n      key: 'confirmed',\n      sorter: (a, b) => a.confirmed - b.confirmed,\n      sortDirections: ['descend', 'ascend'],\n      className: 'table-column',\n    },\n    {\n      title: 'Increment',\n      dataIndex: 'increment',\n      key: 'increment',\n      sorter: (a, b) => a.increment - b.increment,\n      sortDirections: ['descend', 'ascend'],\n      className: 'table-column',\n    },\n    {\n      title: 'Recovered',\n      dataIndex: 'recovered',\n      key: 'recovered',\n      sorter: (a, b) => a.recovered - b.recovered,\n      sortDirections: ['descend', 'ascend'],\n      className: 'table-column',\n    },\n    {\n      title: 'Deaths',\n      dataIndex: 'deaths',\n      key: 'deaths',\n      sorter: (a, b) => a.deaths - b.deaths,\n      sortDirections: ['descend', 'ascend'],\n      className: 'table-column',\n    },\n    {\n      title: 'LastUpdate',\n      dataIndex: 'lastUpdate',\n      key: 'lastUpdate',\n      className: 'table-column',\n    },\n    {\n      title: 'Series',\n      dataIndex: 'timeseries',\n      key: 'timeseries',\n      className: 'table-column',\n      width: 100,\n    },\n  ];\n\n  useEffect(() => {\n    if (!isLoading) {\n      const sortData = arr => arr.sort((a, b) => {\n        const vA = a.confirmed;\n        const vB = b.confirmed;\n        if (vA < vB) {\n            return 1;\n        } else if (vA > vB) {\n            return -1;\n        } else {\n            return 0;\n        }\n      });\n      const dataSource = sortData(Object.entries(latestUpdate).map(([k, v], i) => ({\n        key: `${i}`,\n        area: k,\n        confirmed: v.confirmed,\n        increment: v.increment.confirmed,\n        recovered: v.recovered,\n        deaths: v.deaths,\n        lastUpdate: moment(v.lastUpdate).format('YYYY-MM-DD'),\n        timeseries: (\n          <>\n            {timeSeries[k]\n              ? <Popover\n                placement='topRight'\n                content={<DataTableChart {...timeSeries[k]} />} \n                trigger='click'\n              >\n                <Button shape='circle' icon={<SearchOutlined />} />\n              </Popover>\n              : 'No Data'\n            }\n          </>\n        ),\n      })));\n      batch(() => {\n        setTableData(dataSource);\n        setRenderData(dataSource);\n      });\n    }\n  }, [isLoading, latestUpdate, timeSeries]);\n  return (\n    <Card loading={isLoading} bodyStyle={{ height: '1080px' }}>\n      <Meta\n        title={\n          <Row>\n            <Col className='d-flex justify-content-start align-items-center' span={4}>\n              <h6 style={{ margin: 0 }}>{`Total ${Object.keys(latestUpdate).length} Countries`}</h6>\n            </Col>\n            <Col>\n              <Select\n                showSearch\n                bordered={false}\n                placeholder='Search Country'\n                style={{\n                  width: '100%',\n                }}\n                onSelect={v => v === ''\n                  ? setRenderData(tableData)\n                  : setRenderData([{\n                    key: `single-data-${v}`,\n                    area: v,\n                    confirmed: latestUpdate[v].confirmed,\n                    increment: latestUpdate[v].increment.confirmed,\n                    recovered: latestUpdate[v].recovered,\n                    deaths: latestUpdate[v].deaths,\n                    lastUpdate: moment(latestUpdate[v].lastUpdate).format('YYYY-MM-DD'),\n                    timeseries: (\n                      <>\n                        {timeSeries[v]\n                          ? <Popover\n                            placement='topRight'\n                            content={<DataTableChart {...timeSeries[v]} />} \n                            trigger='click'\n                          >\n                            <Button shape='circle' icon={<SearchOutlined />} />\n                          </Popover>\n                          : 'No Data'\n                        }\n                      </>\n                    ),\n                  }])\n                }\n              >\n                <Option key='Showall' value=''>Show All</Option>\n                <Option key='Worldwide' value='Worldwide'>Worldwide</Option>\n                {Object.keys(latestUpdate).sort().map(k => \n                  k === 'Worldwide' ? null : <Option key={k} value={k}>{k}</Option>\n                )}\n              </Select>\n            </Col>\n          </Row>\n        }\n        description={\n          <Table\n            classNaame='data-table'\n            loading={isLoading}\n            dataSource={renderData}\n            columns={columns}\n            pagination={false}\n            scroll={{ y: 920 }}\n          />\n        }\n      />\n    </Card>\n  );\n};\n\nexport default DataTable;\n","import React, { useState, useEffect } from 'react';\nimport { Card, Select, Row, Col } from 'antd';\nimport { useSelector } from 'react-redux';\nimport * as clist from 'country-list';\nimport lodash from 'lodash';\nimport Script from 'react-load-script';\n\nconst GoogleTrend = props => {\n  const { Meta } = Card;\n  const { Option } = Select;\n  const isLoading = useSelector(state => state.isLoading);\n  const [searchTime, setSearchTime] = useState('now 7-d');\n  const [searchArea, setSearchArea] = useState('');\n\n  const handleScriptLoad = ({ type, time, target, geo }) => {\n    const keyword = 'Corona Virus';\n    window.trends.embed.renderExploreWidgetTo(\n      document.getElementById(target),\n      type,\n      {\n        comparisonItem: geo ? [{ keyword, geo: geo.toUpperCase(), time }] : [{ keyword, time }],\n        category: 0,\n        property: ''\n      },\n      {\n        exploreQuery: geo\n          ? `q=${encodeURI(keyword)}&geo=${geo.toUpperCase()}&date=${time}`\n          : `q=${encodeURI(keyword)}&date=${time}`,\n        guestPath: 'https://trends.google.com:443/trends/embed/'\n      }\n    );\n  };\n\n  useEffect(() => {\n    if (!isLoading) {\n      const gtTimeSeriesParent = document.getElementById('gt-time-series');\n      const gtGeoMapParent = document.getElementById('gt-geo-map');\n      if (gtTimeSeriesParent.children.length > 0 && gtGeoMapParent.children.length > 0) {\n        gtTimeSeriesParent.removeChild(gtTimeSeriesParent.children[0]);\n        gtGeoMapParent.removeChild(gtGeoMapParent.children[0]);\n        handleScriptLoad({\n          type: 'TIMESERIES',\n          keyword: 'Corona Virus',\n          target: 'gt-time-series',\n          time: searchTime,\n          geo: searchArea,\n        });\n        handleScriptLoad({\n          type: 'GEO_MAP',\n          target: 'gt-geo-map',\n          time: searchTime,\n          geo: searchArea,\n        });\n      }\n    }\n  }, [isLoading, searchTime, searchArea]);\n\n  return (\n    <Card loading={isLoading} bodyStyle={{ height: '1080px'}}>\n      <Meta\n        title={\n          <Row>\n            <Col span={12}>\n              <Select\n                showSearch\n                defaultValue='worldwide'\n                bordered={false}\n                style={{\n                  width: '100%',\n                }}\n                onChange={v => setSearchArea(clist.getNameList()[v])}\n              >\n                <Option key='worldwide' value='worldwide'>Worldwide</Option>\n                {Object.keys(clist.getNameList()).sort().map(k => \n                  <Option key={k} value={k}>{lodash.capitalize(k)}</Option>\n                )}\n              </Select>\n            </Col>\n            <Col span={12}>\n              <Select\n                defaultValue='now 7-d'\n                bordered={false}\n                style={{\n                  width: '100%',\n                }}\n                onChange={v => setSearchTime(v)}\n              >\n                <Option value='now 1-H'>Past Hour</Option>\n                <Option value='now 4-H'>Past 4 Hours</Option>\n                <Option value='now 1-d'>Past Day</Option>\n                <Option value='now 7-d'>Past Week</Option>\n                <Option value='today 1-m'>Past Month</Option>\n                <Option value='today 3-m'>Past 3 Months</Option>\n                <Option value='today 2-m'>Past Year</Option>\n              </Select>\n            </Col>\n          </Row>\n        }\n        description={\n          <Row>\n            <Col id='gt-time-series' span={24}>\n              <Script\n                url='https://ssl.gstatic.com/trends_nrtr/2051_RC11/embed_loader.js'\n                onLoad={() => handleScriptLoad({\n                  type: 'TIMESERIES',\n                  keyword: 'Corona Virus',\n                  target: 'gt-time-series',\n                  time: searchTime,\n                })}\n              />\n            </Col>\n            <Col id='gt-geo-map' span={24}>\n              <Script\n                url='https://ssl.gstatic.com/trends_nrtr/2051_RC11/embed_loader.js'\n                onLoad={() => handleScriptLoad({\n                  type: 'GEO_MAP',\n                  target: 'gt-geo-map',\n                  time: searchTime,\n                })}\n              />\n            </Col>\n          </Row>\n        }\n      />\n    </Card>\n  );\n}\n\nexport default GoogleTrend;\n","import React from 'react';\nimport { Layout, Row, Col, BackTop } from 'antd';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './../reducer';\nimport CarouselData from './CarouselData/CarouselData';\nimport OpenLayerMap from './OpenLayerMap/OpenLayerMap';\nimport MainContainer from './MainContainer';\nimport DataTable from './DataTable/DataTable';\nimport GoogleTrend from './GoogleTrend/GoogleTrend';\nimport './App.scss';\n\nconst App = props => {\n  const { Header, Content, Footer } = Layout;\n  const store = createStore(reducer);\n\n  return (\n    <Provider store={store}>\n      <MainContainer id='main-container'>\n        <Layout id=\"app\">\n          <Header>\n            <h1 style={{ color: 'white' }}>Covid-19 Dashboard</h1>\n          </Header>\n          <Layout>\n            <Content style={{\n              padding: '0 50px',\n            }}>\n              <Row justify='center'>\n                <Col id=\"main-content\" span={20}>\n                  <BackTop />\n                  <CarouselData />\n                  <OpenLayerMap />\n                  <Row>\n                    <Col span={18}>\n                      <DataTable />\n                    </Col>\n                    <Col span={6}>\n                      <GoogleTrend />\n                    </Col>\n                  </Row>\n                </Col>\n              </Row>\n            </Content>\n          </Layout>\n          <Footer>\n            <Row>\n              <Col offset={2}>\n                <span>Data Source</span><br />\n                <a href='https://github.com/CSSEGISandData/COVID-19'>https://github.com/CSSEGISandData/COVID-19</a>\n              </Col>\n            </Row>\n          </Footer>\n        </Layout>\n      </MainContainer>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}