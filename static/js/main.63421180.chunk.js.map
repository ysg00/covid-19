{"version":3,"sources":["reducer.js","containers/ReduxContainer.jsx","lang.js","containers/IntlContainer.jsx","utils/Formatter.js","containers/LoadingContainer.jsx","containers/index.jsx","components/CarouselData/CarouselData.jsx","components/OpenLayerMap/OpenLayerMapPopup.jsx","components/OpenLayerMap/OpenLayerMapSideBar.jsx","components/OpenLayerMap/OpenLayerMap.jsx","components/DataTable/DataTableChart.jsx","components/DataTable/DataTable.jsx","components/GoogleTrend/GoogleTrend.jsx","components/Affixes/BackToTop.jsx","components/Affixes/LangSwitch.jsx","components/Affixes/RedirectToGithub.jsx","components/Affixes/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["state","darkMode","locale","isLoading","timeSeries","latestUpdate","featureIdx","features","action","type","children","store","createStore","reducer","zh","en","useSelector","messages","lang","getCapitalizedString","str","toUpperCase","slice","getFormattedDateYYYYMMDD","date","getFullYear","getMonth","getDate","getFormattedMessage","id","values","original","defaultMessage","dispatch","useDispatch","useEffect","timeSeriesWorldwide","lastUpdate","yesterdayData","globalIdx","yesterday","Date","setDate","urls","generateData","csv","dataKey","header","forEach","arr","country","province","currentFeatureIdx","undefined","properties","map","count","ii","time","parseInt","dLen","confirmed","length","push","geometry","coordinates","parseFloat","dk","d","Object","keys","assign","Array","fill","recovered","deaths","handleResTimeSeries","res","csvData","idx","geoFeatures","f","worldwideInc","entries","k","v","increment","Worldwide","del","batch","Promise","all","u","fetch","then","a","json","Error","globData","attributes","Country_Region","Confirmed","Recovered","Deaths","Last_Update","text","t","Papa","parse","complete","e","data","catch","console","log","ReduxContainer","IntlContainer","LoadingContainer","CarouselData","props","Meta","Card","effect","autoplay","dotPosition","key","title","description","span","className","value","valueStyle","color","prefix","ArrowUpOutlined","OpenLayerMapPopup","sdata","renderData","lastConfirmed","lastRecovered","lastDeaths","useState","labels","setLabels","bodyStyle","padding","lastUpdated","toLocaleString","width","height","_","i","margin","top","right","bottom","left","tickSize","tickFormatter","contentStyle","backgroundColor","border","stroke","dot","OpenLayerMapSideBar","propGetter","obj","bordered","loading","itemLayout","dataSource","sort","b","vA","vB","size","scroll","y","renderItem","item","Item","OpenLayerMap","curCoor","setCurCoor","setSdata","setRenderData","getColor","popup","Overlay","element","document","getElementById","autoPan","autoPanAnimation","duration","showFeatureStats","feature","coor","showPopup","get","confirmedCounts","recoveredCounts","deathsCounts","c","r","calculateStats","stats","lastIndex","setPosition","geoJsonType","GeoJSON","vectorSource","VectorSource","format","readFeatures","featureProjection","Map","target","layers","Group","openInLayerSwitcher","Tile","baseLayer","source","OSM","Vector","style","resolution","radiusFactor","Math","log10","maxResolution","confirmedRadius","recoveredRadius","sqrt","deathsRadius","Style","image","Circle","radius","Fill","createStyle","view","View","center","fromLonLat","zoom","overlays","getView","getResolution","on","evt","getTargetElement","cursor","hasFeatureAtPixel","pixel","forEachFeatureAtPixel","window","location","hash","getId","coordinate","DataTableChart","DataTable","tableData","setTableData","Option","Select","columns","dataIndex","ellipsis","sorter","sortDirections","area","timeseries","placement","content","trigger","shape","icon","SearchOutlined","v1","showSearch","placeholder","onSelect","classNaame","pagination","GoogleTrend","searchTime","setSearchTime","searchArea","setSearchArea","handleScriptLoad","geo","query","encodeURI","trends","embed","renderExploreWidgetTo","comparisonItem","keyword","category","property","exploreQuery","guestPath","gtTimeSeriesParent","gtGeoMapParent","removeChild","defaultValue","onChange","clist","url","onLoad","mouseEnterDelay","offsetBottom","onClick","activeElement","blur","href","GithubOutlined","BackToTop","LangSwitch","RedirectToGithub","App","Header","Layout","Content","Footer","justify","offset","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.63421180.chunk.js","sourcesContent":["export default (state = {\n  darkMode: false,\n  locale: 'en',\n  isLoading: true,\n  timeSeries: {},\n  latestUpdate: {},\n  featureIdx: {},\n  features: {},\n}, action) => {\n  switch (action.type) {\n    case 'SET_LOCALE':\n      return {\n        ...state,\n        locale: action.locale,\n      };\n    case 'TOGGLE_DARK_MODE':\n      return {\n        ...state,\n        darkMode: !state.darkMode,\n      };\n    case 'UPDATE_TIMESERIES':\n      return {\n        ...state,\n        timeSeries: action.timeSeries,\n      };\n    case 'UPDATE_LATESTUPDATE':\n      return {\n        ...state,\n        latestUpdate: action.latestUpdate,\n      };\n    case 'UPDATE_FEATURES':\n      return {\n        ...state,\n        features: action.features,\n      };\n    case 'UPDATE_FEATUREIDX':\n      return {\n        ...state,\n        featureIdx: action.featureIdx,\n      };\n    case 'DONE_LOADING':\n      return {\n        ...state,\n        isLoading: false,\n      };\n    default:\n      return state;\n  };\n};\n","import React from 'react';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './../reducer';\n\nexport default ({ children }) => (\n  <Provider store={createStore(reducer)}>\n    {children}\n  </Provider>\n);\n","export default {\n  zh: {\n    'global.confirmed': '确诊',\n    'global.recovered': '治愈',\n    'global.deaths': '死亡',\n    'global.increment': '新增',\n    'table.title.countrynum': '共{v1}个地区',\n    'table.select.placeholder': '搜索国家',\n    'table.select.showall': '显示全部',\n    'table.header.lastupdate': '更新时间',\n    'table.header.area': '地区',\n    'table.header.series': '时间线',\n    'table.cell.nodata': '暂无数据',\n    'map.popup.latestupdate': '最近更新',\n    'gt.time.now 1-H': '过去1小时',\n    'gt.time.now 4-H': '过去4小时',\n    'gt.time.now 1-d': '过去1天',\n    'gt.time.now 7-d': '过去7天',\n    'gt.time.today 1-m': '过去30天',\n    'gt.time.today 3-m': '过去90天',\n    'gt.time.today 12-m': '过去1年',\n    'affix.backtotop': '回到顶部',\n    'affix.github': '查看源代码',\n    'affix.lang': 'Switch To English',\n    'chart.title': '确诊数前十地区',\n    'app.footer.datasource': '数据源',\n    'affix.gotorepo': '查看代码库',\n    'area.Grand Princess': '至尊公主号',\n    'area.Worldwide': '全球',\n    'area.Afghanistan': '阿富汗',\n    'area.Aland Islands': '奥兰群岛',\n    'area.Albania': '阿尔巴尼亚',\n    'area.Algeria': '阿尔及利亚',\n    'area.American Samoa': '美属萨摩亚',\n    'area.Andorra': '安道尔',\n    'area.Angola': '安哥拉',\n    'area.Anguilla': '安圭拉',\n    'area.Antigua and Barbuda': '安提瓜和巴布达',\n    'area.Antarctica': '南极洲',\n    'area.Argentina': '阿根廷',\n    'area.Armenia': '亚美尼亚',\n    'area.Aruba': '阿鲁巴',\n    'area.Australia': '澳大利亚',\n    'area.Austria': '奥地利',\n    'area.Azerbaijan': '阿塞拜疆',\n    'area.Bangladesh': '孟加拉',\n    'area.Bahrain': '巴林',\n    'area.The Bahamas': '巴哈马',\n    'area.Barbados': '巴巴多斯',\n    'area.Belarus': '白俄罗斯',\n    'area.Belgium': '比利时',\n    'area.Belize': '伯利兹',\n    'area.Benin': '贝宁',\n    'area.Bermuda': '百慕大',\n    'area.Bhutan': '不丹',\n    'area.Bolivia': '玻利维亚',\n    'area.Bosnia and Herzegovina': '波斯尼亚和黑塞哥维那',\n    'area.Botswana': '博茨瓦纳',\n    'area.Bouvet Island': '布维岛',\n    'area.Brazil': '巴西',\n    'area.Brunei': '文莱',\n    'area.Bulgaria': '保加利亚',\n    'area.Burkina Faso': '布基纳法索',\n    'area.Burundi': '布隆迪',\n    'area.Cambodia': '柬埔寨',\n    'area.Cameroon': '喀麦隆',\n    'area.Canada': '加拿大',\n    'area.Cabo Verde': '佛得角',\n    'area.Cape Verde': '佛得角',\n    'area.Central African Republic': '中非',\n    'area.Chad': '乍得',\n    'area.Chile': '智利',\n    'area.Christmas Islands': '圣诞岛',\n    'area.Cocos (keeling) Islands': '科科斯（基林）群岛',\n    'area.Colombia': '哥伦比亚',\n    'area.Comoros': '科摩罗',\n    'area.Congo (Kinshasa)': '刚果（金）',\n    'area.Congo (Brazzaville)': '刚果',\n    'area.Republic of the Congo': '刚果',\n    'area.Cook Islands': '库克群岛',\n    'area.Costa Rica': '哥斯达黎加',\n    'area.Cote d\\'Ivoire': '科特迪瓦',\n    'area.China': '中国',\n    'area.Croatia': '克罗地亚',\n    'area.Cuba': '古巴',\n    'area.Curaçao': '库拉索',\n    'area.Curacao': '库拉索',\n    'area.Czechia': '捷克',\n    'area.Cyprus': '塞浦路斯',\n    'area.Cruise Ship': '游轮感染病例',\n    'area.Denmark': '丹麦',\n    'area.Dominican Republic': '多米尼加',\n    'area.Djibouti': '吉布提',\n    'area.Dominica': '多米尼加',\n    'area.East Timor': '东帝汶',\n    'area.Ecuador': '厄瓜多尔',\n    'area.Egypt': '埃及',\n    'area.Equatorial Guinea': '赤道几内亚',\n    'area.Eritrea': '厄立特里亚',\n    'area.Estonia': '爱沙尼亚',\n    'area.Ethiopia': '埃塞俄比亚',\n    'area.Faroe Islands': '法罗群岛',\n    'area.Fiji': '斐济',\n    'area.Finland': '芬兰',\n    'area.France': '法国',\n    'area.Franch Metropolitan': '法国大都会',\n    'area.French Guiana': '法属圭亚那',\n    'area.French Polynesia': '法属波利尼西亚',\n    'area.Gabon': '加蓬',\n    'area.The Gambia': '冈比亚',\n    'area.Germany': '德国',\n    'area.Ghana': '加纳',\n    'area.Gibraltar': '直布罗陀',\n    'area.Greece': '希腊',\n    'area.Grenada': '格林纳达',\n    'area.Greenland': '格陵兰',\n    'area.Guadeloupe': '瓜德罗普岛',\n    'area.Guam': '关岛',\n    'area.Guatemala': '危地马拉',\n    'area.Guernsey': '根西岛',\n    'area.Guinea-Bissau': '几内亚比绍',\n    'area.Guinea': '几内亚',\n    'area.Guyana': '圭亚那',\n    'area.Hong Kong': '香港',\n    'area.Holy See': '圣座',\n    'area.Haiti': '海地',\n    'area.Honduras': '洪都拉斯',\n    'area.Hungary': '匈牙利',\n    'area.Iceland': '冰岛',\n    'area.India': '印度',\n    'area.Indonesia': '印度尼西亚',\n    'area.Iran': '伊朗',\n    'area.Iraq': '伊拉克',\n    'area.Ireland': '爱尔兰',\n    'area.Isle of Man': '马恩岛',\n    'area.Israel': '以色列',\n    'area.Italy': '意大利',\n    'area.Jamaica': '牙买加',\n    'area.Japan': '日本',\n    'area.Jersey': '泽西岛',\n    'area.Jordan': '约旦',\n    'area.Kazakhstan': '哈萨克斯坦',\n    'area.Kenya': '肯尼亚',\n    'area.Kiribati': '基里巴斯',\n    'area.Korea, South': '韩国',\n    'area.Kosovo': '科索沃',\n    'area.Korea, North': '朝鲜',\n    'area.Kuwait': '科威特',\n    'area.Kyrgyzstan': '吉尔吉斯斯坦',\n    'area.Laos': '老挝',\n    'area.Latvia': '拉脱维亚',\n    'area.Lebanon': '黎巴嫩',\n    'area.Lesotho': '莱索托',\n    'area.Liberia': '利比里亚',\n    'area.Libya': '利比亚',\n    'area.Liechtenstein': '列支敦士登',\n    'area.Lithuania': '立陶宛',\n    'area.Luxembourg': '卢森堡',\n    'area.Macau': '澳门（中国）',\n    'area.North Macedonia': '马其顿',\n    'area.Malawi': '马拉维',\n    'area.Malaysia': '马来西亚',\n    'area.Madagascar': '马达加斯加',\n    'area.Maldives': '马尔代夫',\n    'area.Mali': '马里',\n    'area.Malta': '马耳他',\n    'area.Marshall Islands': '马绍尔群岛',\n    'area.Martinique': '马提尼克岛',\n    'area.Mauritania': '毛里塔尼亚',\n    'area.Mauritius': '毛里求斯',\n    'area.Mayotte': '马约特',\n    'area.Mexico': '墨西哥',\n    'area.Micronesia': '密克罗尼西亚',\n    'area.Moldova': '摩尔多瓦',\n    'area.Monaco': '摩纳哥',\n    'area.Mongolia': '蒙古',\n    'area.Inner Mongolia': '内蒙古',\n    'area.Montenegro': '黑山',\n    'area.Montserrat': '蒙特塞拉特',\n    'area.Morocco': '摩洛哥',\n    'area.Mozambique': '莫桑比克',\n    'area.Myanmar': '缅甸',\n    'area.Namibia': '纳米比亚',\n    'area.Nauru': '瑙鲁',\n    'area.Nepal': '尼泊尔',\n    'area.Netherlands': '荷兰',\n    'area.New Caledonia': '新喀里多尼亚',\n    'area.New Zealand': '新西兰',\n    'area.Nicaragua': '尼加拉瓜',\n    'area.Niger': '尼日尔',\n    'area.Nigeria': '尼日利亚',\n    'area.Niue': '纽埃',\n    'area.Norfolk Island': '诺福克岛',\n    'area.Norway': '挪威',\n    'area.Oman': '阿曼',\n    'area.Pakistan': '巴基斯坦',\n    'area.Palau': '帕劳',\n    'area.Palestine': '巴勒斯坦',\n    'area.Panama': '巴拿马',\n    'area.Papua New Guinea': '巴布亚新几内亚',\n    'area.Paraguay': '巴拉圭',\n    'area.Peru': '秘鲁',\n    'area.Philippines': '菲律宾',\n    'area.Pitcairn Islands': '皮特凯恩群岛',\n    'area.Poland': '波兰',\n    'area.Portugal': '葡萄牙',\n    'area.Puerto Rico': '波多黎各',\n    'area.Qatar': '卡塔尔',\n    'area.Réunion': '留尼汪',\n    'area.Reunion': '留尼汪岛',\n    'area.Romania': '罗马尼亚',\n    'area.Rwanda': '卢旺达',\n    'area.Russia': '俄罗斯',\n    'area.Saint Helena': '圣赫勒拿',\n    'area.Saint Kitts-Nevis': '圣基茨和尼维斯',\n    'area.Saint Lucia': '圣卢西亚',\n    'area.Saint Vincent and the Grenadines': '圣文森特和格林纳丁斯',\n    'area.El Salvador': '萨尔瓦多',\n    'area.Samoa': '萨摩亚',\n    'area.San Marino': '圣马力诺',\n    'area.Sao Tome and Principe': '圣多美和普林西比',\n    'area.Saudi Arabia': '沙特阿拉伯',\n    'area.Senegal': '塞内加尔',\n    'area.Seychelles': '塞舌尔',\n    'area.Sierra Leone': '塞拉利昂',\n    'area.Singapore': '新加坡',\n    'area.Serbia': '塞尔维亚',\n    'area.Slovakia': '斯洛伐克',\n    'area.Slovenia': '斯洛文尼亚',\n    'area.Solomon Islands': '所罗门群岛',\n    'area.Somalia': '索马里',\n    'area.South Africa': '南非',\n    'area.Spain': '西班牙',\n    'area.Sri Lanka': '斯里兰卡',\n    'area.Sudan': '苏丹',\n    'area.Suriname': '苏里南',\n    'area.Swaziland': '斯威士兰',\n    'area.Sweden': '瑞典',\n    'area.Eswatini': '斯威士兰',\n    'area.Switzerland': '瑞士',\n    'area.Syria': '叙利亚',\n    'area.Tajikistan': '塔吉克斯坦',\n    'area.Tanzania': '坦桑尼亚',\n    'area.Taiwan*': '台湾',\n    'area.Thailand': '泰国',\n    'area.Trinidad and Tobago': '特立尼达和多巴哥',\n    'area.Timor-Leste': '东帝汶',\n    'area.Togo': '多哥',\n    'area.Tokelau': '托克劳',\n    'area.Tonga': '汤加',\n    'area.Tunisia': '突尼斯',\n    'area.Turkey': '土耳其',\n    'area.Turkmenistan': '土库曼斯坦',\n    'area.Tuvalu': '图瓦卢',\n    'area.Uganda': '乌干达',\n    'area.Ukraine': '乌克兰',\n    'area.United Arab Emirates': '阿拉伯联合酋长国',\n    'area.United Kingdom': '英国',\n    'area.United States': '美国',\n    'area.US': '美国',\n    'area.Uruguay': '乌拉圭',\n    'area.Uzbekistan': '乌兹别克斯坦',\n    'area.Vanuatu': '瓦努阿图',\n    'area.Vatican City': '梵蒂冈',\n    'area.Venezuela': '委内瑞拉',\n    'area.Vietnam': '越南',\n    'area.Wallis and Futuna': '瓦利斯群岛和富图纳群岛',\n    'area.Western Sahara': '西撒哈拉',\n    'area.Yemen': '也门',\n    'area.Yugoslavia': '南斯拉夫',\n    'area.Zambia': '赞比亚',\n    'area.Zimbabwe': '津巴布韦',\n    'area.Yinchuan': '银川',\n    'area.Shizuishan': '石嘴山',\n    'area.Wuzhong': '吴忠',\n    'area.Guyuan': '固原',\n    'area.Zhongwei': '中卫',\n    'area.Wulumuqi': '乌鲁木齐',\n    'area.Kelamayi': '克拉玛依',\n    'area.Lasa': '拉萨',\n    'area.Huhehaote': '呼和浩特',\n    'area.Baotou': '包头',\n    'area.Wuhai': '乌海',\n    'area.Chifeng': '赤峰',\n    'area.Tongliao': '通辽',\n    'area.Eerduosi': '鄂尔多斯',\n    'area.Hulunbeier': '呼伦贝尔',\n    'area.Bayannaoer': '巴彦淖尔',\n    'area.Wulanchabu': '乌兰察布',\n    'area.Nanning': '南宁',\n    'area.Liuzhou': '柳州',\n    'area.Guilin': '桂林',\n    'area.Wuzhou': '梧州',\n    'area.Beihai': '北海',\n    'area.Chongzuo': '崇左',\n    'area.Laibin': '来宾',\n    'area.Hezhou': '贺州',\n    'area.Yulin': '榆林',\n    'area.Baise': '百色',\n    'area.Hechi': '河池',\n    'area.Qinzhou': '钦州',\n    'area.Fangchenggang': '防城港',\n    'area.Guigang': '贵港',\n    'area.Haerbin': '哈尔滨',\n    'area.Daqing': '大庆',\n    'area.Qiqihaer': '齐齐哈尔',\n    'area.Jiamusi': '佳木斯',\n    'area.Jixi': '鸡西',\n    'area.Hegang': '鹤岗',\n    'area.Shuangyashan': '双鸭山',\n    'area.Mudanjiang': '牡丹江',\n    'area.Yichun': '宜春',\n    'area.Qitaihe': '七台河',\n    'area.Heihe': '黑河',\n    'area.Suihua': '绥化',\n    'area.Changchun': '长春',\n    'area.Siping': '四平',\n    'area.Liaoyuan': '辽源',\n    'area.Tonghua': '通化',\n    'area.Baishan': '白山',\n    'area.Songyuan': '松原',\n    'area.Baicheng': '白城',\n    'area.Shenyang': '沈阳',\n    'area.Dalian': '大连',\n    'area.Anshan': '鞍山',\n    'area.Fushun': '抚顺',\n    'area.Benxi': '本溪',\n    'area.Dandong': '丹东',\n    'area.Jinzhou': '锦州',\n    'area.Yingkou': '营口',\n    'area.Fuxin': '阜新',\n    'area.Liaoyang': '辽阳',\n    'area.Panjin': '盘锦',\n    'area.Tieling': '铁岭',\n    'area.Chaoyang': '朝阳',\n    'area.Huludao': '葫芦岛',\n    'area.Shijiazhuang': '石家庄',\n    'area.Tangshan': '唐山',\n    'area.Handan': '邯郸',\n    'area.Qinghuangdao': '秦皇岛',\n    'area.Baoding': '保定',\n    'area.Zhangjiakou': '张家口',\n    'area.Chengde': '承德',\n    'area.Langfang': '廊坊',\n    'area.Cangzhou': '沧州',\n    'area.Hengshui': '衡水',\n    'area.Xingtai': '邢台',\n    'area.Jinan': '济南',\n    'area.Qingdao': '青岛',\n    'area.Zibo': '淄博',\n    'area.Zaozhuang': '枣庄',\n    'area.Dongying': '东营',\n    'area.Yantai': '烟台',\n    'area.Weifang': '潍坊',\n    'area.Jining': '济宁',\n    'area.Taian': '泰安',\n    'area.Weihai': '威海',\n    'area.Rizhao': '日照',\n    'area.Laiwu': '莱芜',\n    'area.Linyi': '临沂',\n    'area.Dezhou': '德州',\n    'area.Liaocheng': '聊城',\n    'area.Heze': '菏泽',\n    'area.Binzhou': '滨州',\n    'area.Nanjing': '南京',\n    'area.Zhenjiang': '镇江',\n    'area.Changzhou': '常州',\n    'area.Wuxi': '无锡',\n    'area.Suzhou': '宿州',\n    'area.Xuzhou': '徐州',\n    'area.Lianyungang': '连云港',\n    'area.Huaian': '淮安',\n    'area.Yancheng': '盐城',\n    'area.Yangzhou': '扬州',\n    'area.Taizhou': '台州',\n    'area.Nantong': '南通',\n    'area.Suqian': '宿迁',\n    'area.Hefei': '合肥',\n    'area.Bengbu': '蚌埠',\n    'area.Wuhu': '芜湖',\n    'area.Huainan': '淮南',\n    'area.Bozhou': '亳州',\n    'area.Fuyang': '阜阳',\n    'area.Huaibei': '淮北',\n    'area.Chuzhou': '滁州',\n    'area.Anqing': '安庆',\n    'area.Chaohu': '巢湖',\n    'area.Maanshan': '马鞍山',\n    'area.Xuancheng': '宣城',\n    'area.Huangshan': '黄山',\n    'area.Chizhou': '池州',\n    'area.Tongling': '铜陵',\n    'area.Hangzhou': '杭州',\n    'area.Jiaxing': '嘉兴',\n    'area.Huzhou': '湖州',\n    'area.Ningbo': '宁波',\n    'area.Jinhua': '金华',\n    'area.Wenzhou': '温州',\n    'area.Lishui': '丽水',\n    'area.Shaoxing': '绍兴',\n    'area.Quzhou': '衢州',\n    'area.Zhoushan': '舟山',\n    'area.Fuzhou': '抚州',\n    'area.Xiamen': '厦门',\n    'area.Quanzhou': '泉州',\n    'area.Sanming': '三明',\n    'area.Nanping': '南平',\n    'area.Zhangzhou': '漳州',\n    'area.Putian': '莆田',\n    'area.Ningde': '宁德',\n    'area.Longyan': '龙岩',\n    'area.Guangzhou': '广州',\n    'area.Shenzhen': '深圳',\n    'area.Shantou': '汕头',\n    'area.Huizhou': '惠州',\n    'area.Zhuhai': '珠海',\n    'area.Jieyang': '揭阳',\n    'area.Foshan': '佛山',\n    'area.Heyuan': '河源',\n    'area.Yangjiang': '阳江',\n    'area.Maoming': '茂名',\n    'area.Zhanjiang': '湛江',\n    'area.Meizhou': '梅州',\n    'area.Zhaoqing': '肇庆',\n    'area.Shaoguan': '韶关',\n    'area.Chaozhou': '潮州',\n    'area.Dongguan': '东莞',\n    'area.Zhongshan': '中山',\n    'area.Qingyuan': '清远',\n    'area.Jiangmen': '江门',\n    'area.Shanwei': '汕尾',\n    'area.Yunfu': '云浮',\n    'area.Haikou': '海口',\n    'area.Sanya': '三亚',\n    'area.Kunming': '昆明',\n    'area.Qujing': '曲靖',\n    'area.Yuxi': '玉溪',\n    'area.Baoshan': '保山',\n    'area.Zhaotong': '昭通',\n    'area.Lijiang': '丽江',\n    'area.Puer': '普洱',\n    'area.Lincang': '临沧',\n    'area.Guiyang': '贵阳',\n    'area.Liupanshui': '六盘水',\n    'area.Zunyi': '遵义',\n    'area.Anshun': '安顺',\n    'area.Chengdu': '成都',\n    'area.Mianyang': '绵阳',\n    'area.Deyang': '德阳',\n    'area.Guangyuan': '广元',\n    'area.Zigong': '自贡',\n    'area.Panzhihua': '攀枝花',\n    'area.Leshan': '乐山',\n    'area.Nanchong': '南充',\n    'area.Neijiang': '内江',\n    'area.Suining': '遂宁',\n    'area.Guangan': '广安',\n    'area.Luzhou': '泸州',\n    'area.Dazhou': '达州',\n    'area.Meishan': '眉山',\n    'area.Yibin': '宜宾',\n    'area.Yaan': '雅安',\n    'area.Ziyang': '资阳',\n    'area.Changsha': '长沙',\n    'area.Zhuzhou': '株洲',\n    'area.Xiangtan': '湘潭',\n    'area.Hengyang': '衡阳',\n    'area.Yueyang': '岳阳',\n    'area.Chenzhou': '郴州',\n    'area.Yongzhou': '永州',\n    'area.Shaoyang': '邵阳',\n    'area.Huaihua': '怀化',\n    'area.Changde': '常德',\n    'area.Yiyang': '益阳',\n    'area.Zhangjiajie': '张家界',\n    'area.Loudi': '娄底',\n    'area.Wuhan': '武汉',\n    'area.Xiangfan': '襄樊',\n    'area.Yichang': '宜昌',\n    'area.Huangshi': '黄石',\n    'area.Ezhou': '鄂州',\n    'area.Suizhou': '随州',\n    'area.Jingzhou': '荆州',\n    'area.Jingmen': '荆门',\n    'area.Shiyan': '十堰',\n    'area.Xiaogan': '孝感',\n    'area.Huanggang': '黄冈',\n    'area.Xianning': '咸宁',\n    'area.Zhengzhou': '郑州',\n    'area.Luoyang': '洛阳',\n    'area.Kaifeng': '开封',\n    'area.Luohe': '漯河',\n    'area.Anyang': '安阳',\n    'area.Xinxiang': '新乡',\n    'area.Zhoukou': '周口',\n    'area.Sanmenxia': '三门峡',\n    'area.Jiaozuo': '焦作',\n    'area.Pingdingshan': '平顶山',\n    'area.Xinyang': '信阳',\n    'area.Nanyang': '南阳',\n    'area.Hebi': '鹤壁',\n    'area.Puyang': '濮阳',\n    'area.Xuchang': '许昌',\n    'area.Shangqiu': '商丘',\n    'area.Zhumadian': '驻马店',\n    'area.Taiyuan': '太原',\n    'area.DaTong': '大同',\n    'area.Xinzhou': '忻州',\n    'area.Yangquan': '阳泉',\n    'area.Changzhi': '长治',\n    'area.Jincheng': '晋城',\n    'area.Shuozhou': '朔州',\n    'area.Jinzhong': '晋中',\n    'area.Yuncheng': '运城',\n    'area.Linfen': '临汾',\n    'area.Lvliang': '吕梁',\n    'area.Xian': '西安',\n    'area.Xianyang': '咸阳',\n    'area.Tongchuan': '铜川',\n    'area.Yanan': '延安',\n    'area.Baoji': '宝鸡',\n    'area.Weinan': '渭南',\n    'area.Hanzhoung': '汉中',\n    'area.Ankang': '安康',\n    'area.Shangluo': '商洛',\n    'area.Lanzhou': '兰州',\n    'area.Tianshui': '天水',\n    'area.Pingliang': '平凉',\n    'area.Jiuquan': '酒泉',\n    'area.Jiayuguan': '嘉峪关',\n    'area.Jinchang': '金昌',\n    'area.baiyiin': '白银',\n    'area.Wuwei': '武威',\n    'area.Zhangye': '张掖',\n    'area.Qingyang': '庆阳',\n    'area.Dingxi': '定西',\n    'area.Longnan': '陇南',\n    'area.Xining': '西宁',\n    'area.Nanchang': '南昌',\n    'area.Jiujiang': '九江',\n    'area.Ganzhou': '赣州',\n    'area.Jian': '吉安',\n    'area.Yingtan': '鹰潭',\n    'area.Shangrao': '上饶',\n    'area.Pingxiang': '萍乡',\n    'area.Jingdezhen': '景德镇',\n    'area.Xinyu': '新余',\n    'area.Alabama': '亚拉巴马州',\n    'area.Alaska': '阿拉斯加州',\n    'area.Arizona': '亚利桑那州',\n    'area.Arkansas': '阿肯色州',\n    'area.California': '加利福尼亚州',\n    'area.Colorado': '科罗拉多州',\n    'area.Connecticut': '康涅狄格州',\n    'area.Delaware': '特拉华州',\n    'area.Florida': '佛罗里达州',\n    'area.Georgia': '佐治亚州',\n    'area.Hawaii': '夏威夷州',\n    'area.Idaho': '爱达华州',\n    'area.Illinois': '伊利诺州',\n    'area.Indiana': '印地安那州',\n    'area.Iowa': '爱荷华州',\n    'area.Kansas': '堪萨斯州',\n    'area.Kentucky': '肯塔基州',\n    'area.Louisiana': '路易斯安那州',\n    'area.Maine': '缅因州',\n    'area.Maryland': '马里兰州',\n    'area.Massachusetts': '麻萨诸塞州',\n    'area.Michigan': '密歇根州',\n    'area.Minnesota': '明尼苏达州',\n    'area.Mississippi': '密西西比州',\n    'area.Missouri': '密苏里州',\n    'area.Montana': '蒙大拿州',\n    'area.Nebraska': '内布拉斯加州',\n    'area.Nevada': '内华达州',\n    'area.New Hampshire': '新罕布什尔州',\n    'area.New Jersey': '新泽西州',\n    'area.New Mexico': '新墨西哥州',\n    'area.New York': '纽约州',\n    'area.North Carolina': '北卡罗来纳州',\n    'area.North Dakota': '北达科他州',\n    'area.Ohio': '俄亥俄州',\n    'area.Oklahoma': '俄克拉何马州',\n    'area.Oregon': '俄勒冈州',\n    'area.Pennsylvania': '宾夕法尼亚州',\n    'area.Rhode Island': '罗德岛州',\n    'area.South Carolina': '南卡罗来纳州',\n    'area.South Dakota': '南达科他州',\n    'area.Tennessee': '田纳西州',\n    'area.Texas': '得克萨斯州',\n    'area.Utah': '犹他州',\n    'area.Vermont': '佛蒙特州',\n    'area.Virgin Islands': '维尔京群岛',\n    'area.Virginia': '弗吉尼亚州',\n    'area.Washington': '华盛顿州',\n    'area.West Virginia': '西弗吉尼亚州',\n    'area.Wisconsin': '威斯康星州',\n    'area.Wyoming': '怀俄明州',\n    'area.Washington, D.C.': '华盛顿哥伦比亚特区',\n    'area.District of Columbia': '华盛顿哥伦比亚特区',\n    'area.Beijing': '北京市',\n    'area.Tianjin': '天津市',\n    'area.Hebei': '河北省',\n    'area.Shanxi': '山西省',\n    'area.Neimenggu': '内蒙古自治区',\n    'area.Liaoning': '辽宁省',\n    'area.Jilin': '吉林省',\n    'area.Heilongjiang': '黑龙江省',\n    'area.Shanghai': '上海市',\n    'area.Jiangsu': '江苏省',\n    'area.Zhejiang': '浙江省',\n    'area.Anhui': '安徽省',\n    'area.Fujian': '福建省',\n    'area.Jiangxi': '江西省',\n    'area.Shandong': '山东省',\n    'area.Henan': '河南省',\n    'area.Hubei': '湖北省',\n    'area.Hunan': '湖南省',\n    'area.Guangdong': '广东省',\n    'area.Guangxi': '广西壮族自治区',\n    'area.Hainan': '海南省',\n    'area.Chongqing': '重庆市',\n    'area.Sichuan': '四川省',\n    'area.Guizhong': '贵州省',\n    'area.Yunnan': '云南省',\n    'area.Xizang': '西藏自治区',\n    'area.Tibet': '西藏自治区',\n    'area.Shaanxi': '陕西省',\n    'area.Gansu': '甘肃省',\n    'area.Qinghai': '青海省',\n    'area.Ningxia': '宁夏回族自治区',\n    'area.Xinjiang': '新疆维吾尔自治区',\n    'area.British Columbia': '不列颠哥伦比亚省',\n    'area.Alberta': '阿尔伯塔省',\n    'area.Saskatchewan': '萨斯喀彻温省',\n    'area.Manitoba': '曼尼托巴省',\n    'area.Ontario': '安大略省',\n    'area.Quebec': '魁北克省',\n    'area.New Brunswick': '新不伦瑞克省',\n    'area.Nova Scotia': '新斯科舍省',\n    'area.Prince Edward Island': '爱德华王子岛省',\n    'area.Newfoundland and Labrador': '纽芬兰省',\n    'area.Nunavut': '努纳武特地区',\n    'area.Northwest Territories': '西北地区',\n    'area.Queensland': '昆士兰',\n    'area.New South Wales': '新南威尔士',\n    'area.Victoria': '维多利亚',\n    'area.Australian Capital Territory': '首都领地',\n    'area.Tasmania': '塔斯马尼亚',\n    'area.South Australia': '南澳大利亚',\n    'area.Western Australia': '西澳大利亚',\n    'area.Northern Territory': '北领地',\n    'area.Diamond Princess': '钻石公主号',\n    'area.Channel Islands': '海峡群岛',\n    'area.Saint Martin': '圣马丁岛',\n    'area.St Martin': '圣马丁岛',\n    'area.Saint Barthelemy': '圣巴泰勒米',\n    'area.Cayman Islands': '开曼群岛',\n    'area.Sint Maarten': '荷属圣马丁',\n    'area.From Diamond Princess': '钻石公主号',\n    'area.United States Virgin Islands': '维尔京群岛',\n    'area.OtherArea': '其他地区',\n  },\n  en: {\n    'global.confirmed': 'Confirmed',\n    'global.recovered': 'Recovered',\n    'global.deaths': 'Deaths',\n    'global.increment': 'Increment',\n    'table.title.countrynum': 'Total {v1} Areas',\n    'table.select.placeholder': 'Search area',\n    'table.select.showall': 'Show All',\n    'table.header.lastupdate': 'LastUpdate',\n    'table.header.area': 'Area',\n    'table.header.series': 'Series',\n    'table.cell.nodata': 'No Data',\n    'map.popup.latestupdate': 'Latest Update',\n    'gt.time.now 1-H': 'Past Hour',\n    'gt.time.now 4-H': 'Past 4 Hours',\n    'gt.time.now 1-d': 'Past Day',\n    'gt.time.now 7-d': 'Past Week',\n    'gt.time.today 1-m': 'Past Month',\n    'gt.time.today 3-m': 'Past 3 Months',\n    'gt.time.today 12-m': 'Past Year',\n    'affix.backtotop': 'Back To Top',\n    'affix.github': 'Go To Repository',\n    'affix.lang': '切换中文',\n    'chart.title': 'Top 10 Confirmed Area',\n    'app.footer.datasource': 'Data Source',\n    'area.Grand Princess': 'Grand Princess',\n    'area.Worldwide': 'Worldwide',\n    'area.Aruba': 'Aruba',\n    'area.Afghanistan': 'Afghanistan',\n    'area.Angola': 'Angola',\n    'area.Anguilla': 'Anguilla',\n    'area.Åland Islands': 'Åland Islands',\n    'area.Albania': 'Albania',\n    'area.Andorra': 'Andorra',\n    'area.United Arab Emirates': 'United Arab Emirates',\n    'area.Argentina': 'Argentina',\n    'area.Armenia': 'Armenia',\n    'area.American Samoa': 'American Samoa',\n    'area.Antarctica': 'Antarctica',\n    'area.French Southern and Antarctic Lands': 'French Southern and Antarctic Lands',\n    'area.Antigua and Barbuda': 'Antigua and Barbuda',\n    'area.Australia': 'Australia',\n    'area.Austria': 'Austria',\n    'area.Azerbaijan': 'Azerbaijan',\n    'area.Burundi': 'Burundi',\n    'area.Belgium': 'Belgium',\n    'area.Benin': 'Benin',\n    'area.Burkina Faso': 'Burkina Faso',\n    'area.Bangladesh': 'Bangladesh',\n    'area.Bulgaria': 'Bulgaria',\n    'area.Bahrain': 'Bahrain',\n    'area.The Bahamas': 'Bahamas',\n    'area.Bosnia and Herzegovina': 'Bosnia and Herzegovina',\n    'area.Saint Barthélemy': 'Saint Barthélemy',\n    'area.Saint Helena, Ascension and Tristan da Cunha': 'Saint Helena, Ascension and Tristan da Cunha',\n    'area.Belarus': 'Belarus',\n    'area.Belize': 'Belize',\n    'area.Bermuda': 'Bermuda',\n    'area.Bolivia': 'Bolivia',\n    'area.Caribbean Netherlands': 'Caribbean Netherlands',\n    'area.Brazil': 'Brazil',\n    'area.Barbados': 'Barbados',\n    'area.Brunei': 'Brunei',\n    'area.Bhutan': 'Bhutan',\n    'area.Bouvet Island': 'Bouvet Island',\n    'area.Botswana': 'Botswana',\n    'area.Central African Republic': 'Central African Republic',\n    'area.Canada': 'Canada',\n    'area.Cocos (Keeling) Islands': 'Cocos (Keeling) Islands',\n    'area.Cote d\\'Ivoire': 'Cote d\\'Ivoire',\n    'area.Switzerland': 'Switzerland',\n    'area.Chile': 'Chile',\n    'area.China': 'China',\n    'area.Ivory Coast': 'Ivory Coast',\n    'area.Cameroon': 'Cameroon',\n    'area.Congo (Kinshasa)': 'Congo (Kinshasa)',\n    'area.Congo (Brazzaville)': 'Congo (Brazzaville)',\n    'area.Republic of the Congo': 'Republic of the Congo',\n    'area.Cook Islands': 'Cook Islands',\n    'area.Colombia': 'Colombia',\n    'area.Comoros': 'Comoros',\n    'area.Cabo Verde': 'Cabo Verde',\n    'area.Cape Verde': 'Cabo Verde',\n    'area.Costa Rica': 'Costa Rica',\n    'area.Cuba': 'Cuba',\n    'area.Curaçao': 'Curaçao',\n    'area.Curacao': 'Curaçao',\n    'area.Christmas Island': 'Christmas Island',\n    'area.Cayman Islands': 'Cayman Islands',\n    'area.Cyprus': 'Cyprus',\n    'area.Cruise Ship': 'Cruise Ship',\n    'area.Czechia': 'Czechia',\n    'area.Germany': 'Germany',\n    'area.Djibouti': 'Djibouti',\n    'area.Dominica': 'Dominica',\n    'area.Denmark': 'Denmark',\n    'area.Dominican Republic': 'Dominican Republic',\n    'area.East Timor': 'area.East Timor',\n    'area.Algeria': 'Algeria',\n    'area.Ecuador': 'Ecuador',\n    'area.Egypt': 'Egypt',\n    'area.Eritrea': 'Eritrea',\n    'area.Western Sahara': 'Western Sahara',\n    'area.Spain': 'Spain',\n    'area.Estonia': 'Estonia',\n    'area.Ethiopia': 'Ethiopia',\n    'area.Finland': 'Finland',\n    'area.Fiji': 'Fiji',\n    'area.Falkland Islands': 'Falkland Islands',\n    'area.France': 'France',\n    'area.Faroe Islands': 'Faroe Islands',\n    'area.Micronesia': 'Micronesia',\n    'area.Gabon': 'Gabon',\n    'area.United Kingdom': 'United Kingdom',\n    'area.Guernsey': 'Guernsey',\n    'area.Ghana': 'Ghana',\n    'area.Gibraltar': 'Gibraltar',\n    'area.Guinea': 'Guinea',\n    'area.Guadeloupe': 'Guadeloupe',\n    'area.The Gambia': 'Gambia',\n    'area.Guinea-Bissau': 'Guinea-Bissau',\n    'area.Equatorial Guinea': 'Equatorial Guinea',\n    'area.Greece': 'Greece',\n    'area.Grenada': 'Grenada',\n    'area.Greenland': 'Greenland',\n    'area.Guatemala': 'Guatemala',\n    'area.French Guiana': 'French Guiana',\n    'area.Guyana': 'Guyana',\n    'area.Holy See': 'Holy See',\n    'area.Hong Kong': 'Hong Kong',\n    'area.Heard Island and McDonald Islands': 'Heard Island and McDonald Islands',\n    'area.Honduras': 'Honduras',\n    'area.Croatia': 'Croatia',\n    'area.Haiti': 'Haiti',\n    'area.Hungary': 'Hungary',\n    'area.Indonesia': 'Indonesia',\n    'area.Isle of Man': 'Isle of Man',\n    'area.India': 'India',\n    'area.British Indian Ocean Territory': 'British Indian Ocean Territory',\n    'area.Ireland': 'Ireland',\n    'area.Iran': 'Iran',\n    'area.Iraq': 'Iraq',\n    'area.Iceland': 'Iceland',\n    'area.Israel': 'Israel',\n    'area.Italy': 'Italy',\n    'area.Jamaica': 'Jamaica',\n    'area.Jersey': 'Jersey',\n    'area.Jordan': 'Jordan',\n    'area.Japan': 'Japan',\n    'area.Kazakhstan': 'Kazakhstan',\n    'area.Kenya': 'Kenya',\n    'area.Kyrgyzstan': 'Kyrgyzstan',\n    'area.Cambodia': 'Cambodia',\n    'area.Kiribati': 'Kiribati',\n    'area.Saint Kitts and Nevis': 'Saint Kitts and Nevis',\n    'area.Korea, South': 'Korea, South',\n    'area.Kosovo': 'Kosovo',\n    'area.Kuwait': 'Kuwait',\n    'area.Laos': 'Laos',\n    'area.Lebanon': 'Lebanon',\n    'area.Liberia': 'Liberia',\n    'area.Libya': 'Libya',\n    'area.Saint Lucia': 'Saint Lucia',\n    'area.Liechtenstein': 'Liechtenstein',\n    'area.Sri Lanka': 'Sri Lanka',\n    'area.Lesotho': 'Lesotho',\n    'area.Lithuania': 'Lithuania',\n    'area.Luxembourg': 'Luxembourg',\n    'area.Latvia': 'Latvia',\n    'area.Macau': 'Macau',\n    'area.Saint Martin': 'Saint Martin',\n    'area.St Martin': 'Saint Martin',\n    'area.Morocco': 'Morocco',\n    'area.Monaco': 'Monaco',\n    'area.Moldova': 'Moldova',\n    'area.Madagascar': 'Madagascar',\n    'area.Maldives': 'Maldives',\n    'area.Mexico': 'Mexico',\n    'area.Marshall Islands': 'Marshall Islands',\n    'area.North Macedonia': 'North Macedonia',\n    'area.Mali': 'Mali',\n    'area.Malta': 'Malta',\n    'area.Myanmar': 'Myanmar',\n    'area.Montenegro': 'Montenegro',\n    'area.Mongolia': 'Mongolia',\n    'area.Inner Mongolia': 'Inner Mongolia',\n    'area.Northern Mariana Islands': 'Northern Mariana Islands',\n    'area.Mozambique': 'Mozambique',\n    'area.Mauritania': 'Mauritania',\n    'area.Montserrat': 'Montserrat',\n    'area.Martinique': 'Martinique',\n    'area.Mauritius': 'Mauritius',\n    'area.Malawi': 'Malawi',\n    'area.Malaysia': 'Malaysia',\n    'area.Mayotte': 'Mayotte',\n    'area.Namibia': 'Namibia',\n    'area.New Caledonia': 'New Caledonia',\n    'area.Niger': 'Niger',\n    'area.Norfolk Island': 'Norfolk Island',\n    'area.Nigeria': 'Nigeria',\n    'area.Nicaragua': 'Nicaragua',\n    'area.Niue': 'Niue',\n    'area.Netherlands': 'Netherlands',\n    'area.Norway': 'Norway',\n    'area.Nepal': 'Nepal',\n    'area.Nauru': 'Nauru',\n    'area.New Zealand': 'New Zealand',\n    'area.Oman': 'Oman',\n    'area.Pakistan': 'Pakistan',\n    'area.Palau': 'Palau',\n    'area.Panama': 'Panama',\n    'area.Pitcairn Islands': 'Pitcairn Islands',\n    'area.Peru': 'Peru',\n    'area.Philippines': 'Philippines',\n    'area.Papua New Guinea': 'Papua New Guinea',\n    'area.Poland': 'Poland',\n    'area.Korea, North': 'Korea, North',\n    'area.Portugal': 'Portugal',\n    'area.Paraguay': 'Paraguay',\n    'area.Palestine': 'Palestine',\n    'area.French Polynesia': 'French Polynesia',\n    'area.Qatar': 'Qatar',\n    'area.Réunion': 'Réunion',\n    'area.Reunion': 'Réunion',\n    'area.Romania': 'Romania',\n    'area.Russia': 'Russia',\n    'area.Rwanda': 'Rwanda',\n    'area.Saudi Arabia': 'Saudi Arabia',\n    'area.Sudan': 'Sudan',\n    'area.Senegal': 'Senegal',\n    'area.Singapore': 'Singapore',\n    'area.South Georgia': 'South Georgia',\n    'area.Svalbard and Jan Mayen': 'Svalbard and Jan Mayen',\n    'area.Solomon Islands': 'Solomon Islands',\n    'area.Sierra Leone': 'Sierra Leone',\n    'area.El Salvador': 'El Salvador',\n    'area.San Marino': 'San Marino',\n    'area.Somalia': 'Somalia',\n    'area.Saint Pierre and Miquelon': 'Saint Pierre and Miquelon',\n    'area.Serbia': 'Serbia',\n    'area.South Sudan': 'South Sudan',\n    'area.São Tomé and Príncipe': 'São Tomé and Príncipe',\n    'area.Suriname': 'Suriname',\n    'area.Slovakia': 'Slovakia',\n    'area.Slovenia': 'Slovenia',\n    'area.Sweden': 'Sweden',\n    'area.Eswatini': 'Eswatini',\n    'area.Sint Maarten': 'Sint Maarten',\n    'area.Seychelles': 'Seychelles',\n    'area.Syria': 'Syria',\n    'area.Turks and Caicos Islands': 'Turks and Caicos Islands',\n    'area.Chad': 'Chad',\n    'area.Togo': 'Togo',\n    'area.Thailand': 'Thailand',\n    'area.Tajikistan': 'Tajikistan',\n    'area.Tokelau': 'Tokelau',\n    'area.Turkmenistan': 'Turkmenistan',\n    'area.Timor-Leste': 'Timor-Leste',\n    'area.Tonga': 'Tonga',\n    'area.Trinidad and Tobago': 'Trinidad and Tobago',\n    'area.Tunisia': 'Tunisia',\n    'area.Turkey': 'Turkey',\n    'area.Tuvalu': 'Tuvalu',\n    'area.Taiwan*': 'Taiwan',\n    'area.Tanzania': 'Tanzania',\n    'area.Uganda': 'Uganda',\n    'area.Ukraine': 'Ukraine',\n    'area.United States Minor Outlying Islands': 'United States Minor Outlying Islands',\n    'area.Uruguay': 'Uruguay',\n    'area.United States': 'United States',\n    'area.US': 'United States',\n    'area.Uzbekistan': 'Uzbekistan',\n    'area.Vatican City': 'Vatican City',\n    'area.Saint Vincent and the Grenadines': 'Saint Vincent and the Grenadines',\n    'area.Venezuela': 'Venezuela',\n    'area.British Virgin Islands': 'British Virgin Islands',\n    'area.United States Virgin Islands': 'United States Virgin Islands',\n    'area.Vietnam': 'Vietnam',\n    'area.Vanuatu': 'Vanuatu',\n    'area.Wallis and Futuna': 'Wallis and Futuna',\n    'area.Samoa': 'Samoa',\n    'area.Yemen': 'Yemen',\n    'area.South Africa': 'South Africa',\n    'area.Zambia': 'Zambia',\n    'area.Zimbabwe': 'Zimbabwe',\n    'area.Beijing': 'Beijing',\n    'area.Tianjin': 'Tianjin',\n    'area.Shanghai': 'Shanghai',\n    'area.Yinchuan': 'Yinchuan',\n    'area.Shizuishan': 'Shizuishan',\n    'area.Wuzhong': 'Wuzhong',\n    'area.Guyuan': 'Guyuan',\n    'area.Zhongwei': 'Zhongwei',\n    'area.Wulumuqi': 'Wulumuqi',\n    'area.Kelamayi': 'Kelamayi',\n    'area.Lasa': 'Lasa',\n    'area.Huhehaote': 'Huhehaote',\n    'area.Baotou': 'Baotou',\n    'area.Wuhai': 'Wuhai',\n    'area.Chifeng': 'Chifeng',\n    'area.Tongliao': 'Tongliao',\n    'area.Eerduosi': 'Eerduosi',\n    'area.Hulunbeier': 'Hulunbeier',\n    'area.Bayannaoer': 'Bayannaoer',\n    'area.Wulanchabu': 'Wulanchabu',\n    'area.Nanning': 'Nanning',\n    'area.Liuzhou': 'Liuzhou',\n    'area.Guilin': 'Guilin',\n    'area.Wuzhou': 'Wuzhou',\n    'area.Beihai': 'Beihai',\n    'area.Chongzuo': 'Chongzuo',\n    'area.Laibin': 'Laibin',\n    'area.Hezhou': 'Hezhou',\n    'area.Yulin': 'Yulin',\n    'area.Baise': 'Baise',\n    'area.Hechi': 'Hechi',\n    'area.Qinzhou': 'Qinzhou',\n    'area.Fangchenggang': 'Fangchenggang',\n    'area.Guigang': 'Guigang',\n    'area.Haerbin': 'Haerbin',\n    'area.Daqing': 'Daqing',\n    'area.Qiqihaer': 'Qiqihaer',\n    'area.Jiamusi': 'Jiamusi',\n    'area.Jixi': 'Jixi',\n    'area.Hegang': 'Hegang',\n    'area.Shuangyashan': 'Shuangyashan',\n    'area.Mudanjiang': 'Mudanjiang',\n    'area.Yichun': 'Yichun',\n    'area.Qitaihe': 'Qitaihe',\n    'area.Heihe': 'Heihe',\n    'area.Suihua': 'Suihua',\n    'area.Changchun': 'Changchun',\n    'area.Siping': 'Siping',\n    'area.Liaoyuan': 'Liaoyuan',\n    'area.Tonghua': 'Tonghua',\n    'area.Baishan': 'Baishan',\n    'area.Songyuan': 'Songyuan',\n    'area.Baicheng': 'Baicheng',\n    'area.Shenyang': 'Shenyang',\n    'area.Dalian': 'Dalian',\n    'area.Anshan': 'Anshan',\n    'area.Fushun': 'Fushun',\n    'area.Benxi': 'Benxi',\n    'area.Dandong': 'Dandong',\n    'area.Jinzhou': 'Jinzhou',\n    'area.Yingkou': 'Yingkou',\n    'area.Fuxin': 'Fuxin',\n    'area.Liaoyang': 'Liaoyang',\n    'area.Panjin': 'Panjin',\n    'area.Tieling': 'Tieling',\n    'area.Chaoyang': 'Chaoyang',\n    'area.Huludao': 'Huludao',\n    'area.Shijiazhuang': 'Shijiazhuang',\n    'area.Tangshan': 'Tangshan',\n    'area.Handan': 'Handan',\n    'area.Qinghuangdao': 'Qinghuangdao',\n    'area.Baoding': 'Baoding',\n    'area.Zhangjiakou': 'Zhangjiakou',\n    'area.Chengde': 'Chengde',\n    'area.Langfang': 'Langfang',\n    'area.Cangzhou': 'Cangzhou',\n    'area.Hengshui': 'Hengshui',\n    'area.Xingtai': 'Xingtai',\n    'area.Jinan': 'Jinan',\n    'area.Qingdao': 'Qingdao',\n    'area.Zibo': 'Zibo',\n    'area.Zaozhuang': 'Zaozhuang',\n    'area.Dongying': 'Dongying',\n    'area.Yantai': 'Yantai',\n    'area.Weifang': 'Weifang',\n    'area.Jining': 'Jining',\n    'area.Taian': 'Taian',\n    'area.Weihai': 'Weihai',\n    'area.Rizhao': 'Rizhao',\n    'area.Laiwu': 'Laiwu',\n    'area.Linyi': 'Linyi',\n    'area.Dezhou': 'Dezhou',\n    'area.Liaocheng': 'Liaocheng',\n    'area.Heze': 'Heze',\n    'area.Binzhou': 'Binzhou',\n    'area.Nanjing': 'Nanjing',\n    'area.Zhenjiang': 'Zhenjiang',\n    'area.Changzhou': 'Changzhou',\n    'area.Wuxi': 'Wuxi',\n    'area.Suzhou': 'Suzhou',\n    'area.Xuzhou': 'Xuzhou',\n    'area.Lianyungang': 'Lianyungang',\n    'area.Huaian': 'Huaian',\n    'area.Yancheng': 'Yancheng',\n    'area.Yangzhou': 'Yangzhou',\n    'area.Taizhou': 'Taizhou',\n    'area.Nantong': 'Nantong',\n    'area.Suqian': 'Suqian',\n    'area.Hefei': 'Hefei',\n    'area.Bengbu': 'Bengbu',\n    'area.Wuhu': 'Wuhu',\n    'area.Huainan': 'Huainan',\n    'area.Bozhou': 'Bozhou',\n    'area.Fuyang': 'Fuyang',\n    'area.Huaibei': 'Huaibei',\n    'area.Chuzhou': 'Chuzhou',\n    'area.Anqing': 'Anqing',\n    'area.Chaohu': 'Chaohu',\n    'area.Maanshan': 'Maanshan',\n    'area.Xuancheng': 'Xuancheng',\n    'area.Huangshan': 'Huangshan',\n    'area.Chizhou': 'Chizhou',\n    'area.Tongling': 'Tongling',\n    'area.Hangzhou': 'Hangzhou',\n    'area.Jiaxing': 'Jiaxing',\n    'area.Huzhou': 'Huzhou',\n    'area.Ningbo': 'Ningbo',\n    'area.Jinhua': 'Jinhua',\n    'area.Wenzhou': 'Wenzhou',\n    'area.Lishui': 'Lishui',\n    'area.Shaoxing': 'Shaoxing',\n    'area.Quzhou': 'Quzhou',\n    'area.Zhoushan': 'Zhoushan',\n    'area.Fuzhou': 'Fuzhou',\n    'area.Xiamen': 'Xiamen',\n    'area.Quanzhou': 'Quanzhou',\n    'area.Sanming': 'Sanming',\n    'area.Nanping': 'Nanping',\n    'area.Zhangzhou': 'Zhangzhou',\n    'area.Putian': 'Putian',\n    'area.Ningde': 'Ningde',\n    'area.Longyan': 'Longyan',\n    'area.Guangzhou': 'Guangzhou',\n    'area.Shenzhen': 'Shenzhen',\n    'area.Shantou': 'Shantou',\n    'area.Huizhou': 'Huizhou',\n    'area.Zhuhai': 'Zhuhai',\n    'area.Jieyang': 'Jieyang',\n    'area.Foshan': 'Foshan',\n    'area.Heyuan': 'Heyuan',\n    'area.Yangjiang': 'Yangjiang',\n    'area.Maoming': 'Maoming',\n    'area.Zhanjiang': 'Zhanjiang',\n    'area.Meizhou': 'Meizhou',\n    'area.Zhaoqing': 'Zhaoqing',\n    'area.Shaoguan': 'Shaoguan',\n    'area.Chaozhou': 'Chaozhou',\n    'area.Dongguan': 'Dongguan',\n    'area.Zhongshan': 'Zhongshan',\n    'area.Qingyuan': 'Qingyuan',\n    'area.Jiangmen': 'Jiangmen',\n    'area.Shanwei': 'Shanwei',\n    'area.Yunfu': 'Yunfu',\n    'area.Haikou': 'Haikou',\n    'area.Sanya': 'Sanya',\n    'area.Kunming': 'Kunming',\n    'area.Qujing': 'Qujing',\n    'area.Yuxi': 'Yuxi',\n    'area.Baoshan': 'Baoshan',\n    'area.Zhaotong': 'Zhaotong',\n    'area.Lijiang': 'Lijiang',\n    'area.Puer': 'Puer',\n    'area.Lincang': 'Lincang',\n    'area.Guiyang': 'Guiyang',\n    'area.Liupanshui': 'Liupanshui',\n    'area.Zunyi': 'Zunyi',\n    'area.Anshun': 'Anshun',\n    'area.Chengdu': 'Chengdu',\n    'area.Mianyang': 'Mianyang',\n    'area.Deyang': 'Deyang',\n    'area.Guangyuan': 'Guangyuan',\n    'area.Zigong': 'Zigong',\n    'area.Panzhihua': 'Panzhihua',\n    'area.Leshan': 'Leshan',\n    'area.Nanchong': 'Nanchong',\n    'area.Neijiang': 'Neijiang',\n    'area.Suining': 'Suining',\n    'area.Guangan': 'Guangan',\n    'area.Luzhou': 'Luzhou',\n    'area.Dazhou': 'Dazhou',\n    'area.Meishan': 'Meishan',\n    'area.Yibin': 'Yibin',\n    'area.Yaan': 'Yaan',\n    'area.Ziyang': 'Ziyang',\n    'area.Changsha': 'Changsha',\n    'area.Zhuzhou': 'Zhuzhou',\n    'area.Xiangtan': 'Xiangtan',\n    'area.Hengyang': 'Hengyang',\n    'area.Yueyang': 'Yueyang',\n    'area.Chenzhou': 'Chenzhou',\n    'area.Yongzhou': 'Yongzhou',\n    'area.Shaoyang': 'Shaoyang',\n    'area.Huaihua': 'Huaihua',\n    'area.Changde': 'Changde',\n    'area.Yiyang': 'Yiyang',\n    'area.Zhangjiajie': 'Zhangjiajie',\n    'area.Loudi': 'Loudi',\n    'area.Wuhan': 'Wuhan',\n    'area.Xiangfan': 'Xiangfan',\n    'area.Yichang': 'Yichang',\n    'area.Huangshi': 'Huangshi',\n    'area.Ezhou': 'Ezhou',\n    'area.Suizhou': 'Suizhou',\n    'area.Jingzhou': 'Jingzhou',\n    'area.Jingmen': 'Jingmen',\n    'area.Shiyan': 'Shiyan',\n    'area.Xiaogan': 'Xiaogan',\n    'area.Huanggang': 'Huanggang',\n    'area.Xianning': 'Xianning',\n    'area.Zhengzhou': 'Zhengzhou',\n    'area.Luoyang': 'Luoyang',\n    'area.Kaifeng': 'Kaifeng',\n    'area.Luohe': 'Luohe',\n    'area.Anyang': 'Anyang',\n    'area.Xinxiang': 'Xinxiang',\n    'area.Zhoukou': 'Zhoukou',\n    'area.Sanmenxia': 'Sanmenxia',\n    'area.Jiaozuo': 'Jiaozuo',\n    'area.Pingdingshan': 'Pingdingshan',\n    'area.Xinyang': 'Xinyang',\n    'area.Nanyang': 'Nanyang',\n    'area.Hebi': 'Hebi',\n    'area.Puyang': 'Puyang',\n    'area.Xuchang': 'Xuchang',\n    'area.Shangqiu': 'Shangqiu',\n    'area.Zhumadian': 'Zhumadian',\n    'area.Taiyuan': 'Taiyuan',\n    'area.DaTong': 'DaTong',\n    'area.Xinzhou': 'Xinzhou',\n    'area.Yangquan': 'Yangquan',\n    'area.Changzhi': 'Changzhi',\n    'area.Jincheng': 'Jincheng',\n    'area.Shuozhou': 'Shuozhou',\n    'area.Jinzhong': 'Jinzhong',\n    'area.Yuncheng': 'Yuncheng',\n    'area.Linfen': 'Linfen',\n    'area.Lvliang': 'Lvliang',\n    'area.Xian': 'Xian',\n    'area.Xianyang': 'Xianyang',\n    'area.Tongchuan': 'Tongchuan',\n    'area.Yanan': 'Yanan',\n    'area.Baoji': 'Baoji',\n    'area.Weinan': 'Weinan',\n    'area.Hanzhoung': 'Hanzhoung',\n    'area.Ankang': 'Ankang',\n    'area.Shangluo': 'Shangluo',\n    'area.Lanzhou': 'Lanzhou',\n    'area.Tianshui': 'Tianshui',\n    'area.Pingliang': 'Pingliang',\n    'area.Jiuquan': 'Jiuquan',\n    'area.Jiayuguan': 'Jiayuguan',\n    'area.Jinchang': 'Jinchang',\n    'area.baiyiin': 'baiyiin',\n    'area.Wuwei': 'Wuwei',\n    'area.Zhangye': 'Zhangye',\n    'area.Qingyang': 'Qingyang',\n    'area.Dingxi': 'Dingxi',\n    'area.Longnan': 'Longnan',\n    'area.Xining': 'Xining',\n    'area.Nanchang': 'Nanchang',\n    'area.Jiujiang': 'Jiujiang',\n    'area.Ganzhou': 'Ganzhou',\n    'area.Jian': 'Jian',\n    'area.Yingtan': 'Yingtan',\n    'area.Shangrao': 'Shangrao',\n    'area.Pingxiang': 'Pingxiang',\n    'area.Jingdezhen': 'Jingdezhen',\n    'area.Xinyu': 'Xinyu',\n    'area.Alabama': 'Alabama',\n    'area.Alaska': 'Alaska',\n    'area.Arizona': 'Arizona',\n    'area.Arkansas': 'Arkansas',\n    'area.California': 'California',\n    'area.Colorado': 'Colorado',\n    'area.Connecticut': 'Connecticut',\n    'area.Delaware': 'Delaware',\n    'area.Florida': 'Florida',\n    'area.Georgia': 'Georgia',\n    'area.Guam': 'Guam',\n    'area.Hawaii': 'Hawaii',\n    'area.Idaho': 'Idaho',\n    'area.Illinois': 'Illinois',\n    'area.Indiana': 'Indiana',\n    'area.Iowa': 'Iowa',\n    'area.Kansas': 'Kansas',\n    'area.Kentucky': 'Kentucky',\n    'area.Louisiana': 'Louisiana',\n    'area.Maine': 'Maine',\n    'area.Maryland': 'Maryland',\n    'area.Massachusetts': 'Massachusetts',\n    'area.Michigan': 'Michigan',\n    'area.Minnesota': 'Minnesota',\n    'area.Mississippi': 'Mississippi',\n    'area.Missouri': 'Missouri',\n    'area.Montana': 'Montana',\n    'area.Nebraska': 'Nebraska',\n    'area.Nevada': 'Nevada',\n    'area.New Hampshire': 'New Hampshire',\n    'area.New Jersey': 'New Jersey',\n    'area.New Mexico': 'New Mexico',\n    'area.New York': 'New York',\n    'area.North Carolina': 'North Carolina',\n    'area.North Dakota': 'North Dakota',\n    'area.Ohio': 'Ohio',\n    'area.Oklahoma': 'Oklahoma',\n    'area.Oregon': 'Oregon',\n    'area.Pennsylvania': 'Pennsylvania',\n    'area.Puerto Rico': 'Puerto Rico',\n    'area.Rhode Island': 'Rhode Island',\n    'area.South Carolina': 'South Carolina',\n    'area.South Dakota': 'South Dakota',\n    'area.Tennessee': 'Tennessee',\n    'area.Texas': 'Texas',\n    'area.Utah': 'Utah',\n    'area.Vermont': 'Vermont',\n    'area.Virgin Islands': 'Virgin Islands',\n    'area.Virginia': 'Virginia',\n    'area.Washington': 'Washington',\n    'area.West Virginia': 'West Virginia',\n    'area.Wisconsin': 'Wisconsin',\n    'area.Wyoming': 'Wyoming',\n    'area.Washington, D.C.': 'Washington, D.C.',\n    'area.District of Columbia': 'Washington, D.C.',\n    'area.Hebei': 'Hebei',\n    'area.Shanxi': 'Shanxi',\n    'area.Neimenggu': 'Neimenggu',\n    'area.Liaoning': 'Liaoning',\n    'area.Jilin': 'Jilin',\n    'area.Heilongjiang': 'Heilongjiang',\n    'area.Jiangsu': 'Jiangsu',\n    'area.Zhejiang': 'Zhejiang',\n    'area.Anhui': 'Anhui',\n    'area.Fujian': 'Fujian',\n    'area.Jiangxi': 'Jiangxi',\n    'area.Shandong': 'Shandong',\n    'area.Henan': 'Henan',\n    'area.Hubei': 'Hubei',\n    'area.Hunan': 'Hunan',\n    'area.Guangdong': 'Guangdong',\n    'area.Guangxi': 'Guangxi',\n    'area.Hainan': 'Hainan',\n    'area.Chongqing': 'Chongqing',\n    'area.Sichuan': 'Sichuan',\n    'area.Guizhong': 'Guizhong',\n    'area.Yunnan': 'Yunnan',\n    'area.Xizang': 'Xizang',\n    'area.Tibet': 'Tibet',\n    'area.Shaanxi': 'Shaanxi',\n    'area.Gansu': 'Gansu',\n    'area.Qinghai': 'Qinghai',\n    'area.Ningxia': 'Ningxia',\n    'area.Xinjiang': 'Xinjiang',\n    'area.British Columbia': 'British Columbia',\n    'area.Alberta': 'Alberta',\n    'area.Saskatchewan': 'Saskatchewan',\n    'area.Manitoba': 'Manitoba',\n    'area.Ontario': 'Ontario',\n    'area.Quebec': 'Quebec',\n    'area.New Brunswick': 'New Brunswick',\n    'area.Nova Scotia': 'Nova Scotia',\n    'area.Prince Edward Island': 'Prince Edward Island',\n    'area.Newfoundland and Labrador': 'Newfoundland and Labrador',\n    'area.Nunavut': 'Nunavut',\n    'area.Northwest Territories': 'Northwest Territories',\n    'area.Queensland': 'Queensland',\n    'area.New South Wales': 'New South Wales',\n    'area.Victoria': 'Victoria',\n    'area.Australian Capital Territory': 'Australian Capital Territory',\n    'area.Tasmania': 'Tasmania',\n    'area.South Australia': 'South Australia',\n    'area.Western Australia': 'Western Australia',\n    'area.Northern Territory': 'Northern Territory',\n    'area.Diamond Princess': 'Diamond Princess',\n    'area.Channel Islands': 'Channel Islands',\n    'area.Saint Barthelemy': 'Saint Barthélemy',\n    'area.From Diamond Princess': 'Diamond Princess',\n    'area.OtherArea':  'OtherArea',\n  },\n};","import React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport lang from './../lang';\n\nexport default ({ children }) => {\n  const locale = useSelector(state => state.locale)\n  return (\n    <IntlProvider locale={locale} messages={lang[locale]}>\n      {children}\n    </IntlProvider>\n  );\n};\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport lang from './../lang';\n\nexport const getCapitalizedString = str => str[0].toUpperCase() + str.slice(1);\n\nexport const getFormattedDateYYYYMMDD = date => `${date.getFullYear()}-${date.getMonth() < 9\n  ? `0${date.getMonth() + 1}`\n  : date.getMonth() + 1}-${date.getDate()}`;\n\nexport const getFormattedDateMMDDYYYY = date => `${date.getMonth() < 9\n  ? `0${date.getMonth() + 1}`\n  : date.getMonth() + 1}-${date.getDate()}-${date.getFullYear()}`;\n\nexport const getFormattedMessage = (id, values = {}, original = '') => (\n  <>\n    {lang.en[id]\n      ? <FormattedMessage\n        id={id}\n        defaultMessage={lang.en[id]}\n        values={values}\n      />\n      : original\n    }\n  </>\n);\n\nexport const getFormatMessage = (id, locale, original = '') =>\n{\n  return lang[locale][id]\n  ? lang[locale][id]\n  : lang['en'][id]\n  ? lang['en'][id]\n  : original\n}\n  ","import React, { useEffect } from 'react';\nimport { batch, useDispatch } from 'react-redux';\nimport Papa from 'papaparse';\nimport { getFormattedDateMMDDYYYY } from './../utils/Formatter';\n\nexport default ({ children }) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const features = [];\n    const featureIdx = {};\n    const timeSeries = {};\n    const timeSeriesWorldwide = {};\n    const latestUpdate = {};\n    const lastUpdate = {};\n    const yesterdayData = {};\n    let globalIdx = 0;\n    const yesterday = getFormattedDateMMDDYYYY(new Date(new Date().setDate(new Date().getDate() - 1)));\n    const urls = [\n      'https://services1.arcgis.com/0MSEUqKaxRlEPj5g/ArcGIS/rest/services/ncov_cases/FeatureServer/2/query?where=1%3D1&outFields=*&f=json',\n      'https://raw.githubusercontent.com/ysg00/covid-19/dev/src/data/confirmed_timeseries.csv',\n      'https://raw.githubusercontent.com/ysg00/covid-19/dev/src/data/recovered_timeseries.csv',\n      'https://raw.githubusercontent.com/ysg00/covid-19/dev/src/data/deaths_timeseries.csv',\n      `https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/${yesterday}.csv`,\n    ];\n    const speciallyHandleCondition = (country, province) => {\n      // handle special case due to the data\n      return (\n        (\n          country === 'Australia'\n            && province === 'From Diamond Princess'\n        ) || (\n          country === 'Canada'\n            && province === 'Recovered'\n        )\n      );\n    };\n    const generateData = (csv, dataKey) => {\n      // jhu csv header format: [province, country, lat, long, date...]\n      const header = csv[0];\n      csv.slice(1).forEach(arr => {\n        if (arr[1] && !speciallyHandleCondition(arr[1], arr[0])) {\n          const currentFeatureIdx = featureIdx[`${arr[1]}-${arr[0]}`];\n          if (currentFeatureIdx !== undefined) {\n            features[currentFeatureIdx].properties[dataKey] = arr.slice(4).map((count, ii) => ({\n              time: new Date(header[ii + 4] + ' 00:00'),\n              count: count === '' ? parseInt(arr[ii + 3]) : parseInt(count),\n            }));\n            const dLen = features[currentFeatureIdx].properties.confirmed.length;\n            if (!features[currentFeatureIdx].properties[dataKey][dLen-1]) {\n              features[currentFeatureIdx].properties[dataKey][dLen-1] = features[currentFeatureIdx].properties[dataKey][dLen-2]\n            }\n          } else {\n            featureIdx[`${arr[1]}-${arr[0]}`] = globalIdx;\n            features.push({\n              id: globalIdx,\n              type: 'Feature',\n              geometry: {\n                type: 'Point',\n                coordinates: [parseFloat(arr[3]), parseFloat(arr[2])],\n              },\n              properties: {\n                country: arr[1],\n                province: arr[0],\n                [dataKey]: arr.slice(4).map((count, ii) => ({\n                  time: new Date(header[ii + 4] + ' 00:00'),\n                  count: count === '' ? parseInt(arr[ii + 3]) : parseInt(count),\n                })),\n              }\n            });\n            globalIdx += 1;\n          }\n          if (lastUpdate[arr[1]]) {\n            if (timeSeries[arr[1]]) {\n              if (timeSeries[arr[1]][dataKey]) {\n                timeSeries[arr[1]][dataKey].forEach((dk, ii) => {\n                  timeSeries[arr[1]][dataKey][ii] = dk + parseInt(arr[ii+4])\n                });\n              } else {\n                timeSeries[arr[1]][dataKey] = [...arr.slice(4)].map(d => parseInt(d));\n              }\n            }\n            else {\n              timeSeries[arr[1]] = {\n                time: [...header.slice(4)].map(d => new Date(d + ' 00:00')),\n                [dataKey]: [...arr.slice(4)].map(d => parseInt(d)),\n              };\n            }\n            if (Object.keys(timeSeriesWorldwide).length) {\n              timeSeriesWorldwide[dataKey].forEach((dk, ii) => {\n                timeSeriesWorldwide[dataKey][ii] = dk + parseInt(arr[ii+4])\n              });\n            } else {\n              const dLen = arr.length-4;\n              Object.assign(timeSeriesWorldwide, {\n                time: [...header.slice(4)].map(d => new Date(d + ' 00:00')),\n                confirmed: Array(dLen).fill(0),\n                recovered: Array(dLen).fill(0),\n                deaths: Array(dLen).fill(0),\n                [dataKey]: [...arr.slice(4)].map(d => parseInt(d)),\n              });\n            }\n          }\n        }\n      });\n    };\n\n    const handleResTimeSeries = res => {\n      const { csvData, idx } = res;\n      if (idx === 0) {\n        generateData(csvData, 'confirmed')\n      } else if (idx === 1) {\n        generateData(csvData, 'recovered')\n      } else if (idx === 2) {\n        generateData(csvData, 'deaths')\n      } else {\n        const geoFeatures = [];\n        features.forEach(f => {\n          if (f.properties.confirmed && f.properties.recovered && f.properties.deaths) {\n            geoFeatures.push(f);\n          }\n        });\n        const worldwideInc = {\n          confirmed: 0,\n          recovered: 0,\n          deaths: 0,\n        };\n        csvData.slice(1).forEach(arr => {\n          if (arr[3]) {\n            if (yesterdayData[arr[3]]) {\n              yesterdayData[arr[3]].confirmed += parseInt(arr[7]);\n              yesterdayData[arr[3]].recovered += parseInt(arr[9]);\n              yesterdayData[arr[3]].deaths += parseInt(arr[8]);\n            } else {\n              yesterdayData[arr[3]] = {\n                confirmed: parseInt(arr[7]),\n                recovered: parseInt(arr[9]),\n                deaths: parseInt(arr[8]),\n              };\n            }\n            worldwideInc.confirmed += parseInt(arr[7]);\n            worldwideInc.recovered += parseInt(arr[9]);\n            worldwideInc.deaths += parseInt(arr[8]);\n          }\n        });\n        Object.entries(lastUpdate).forEach(([k, v]) => {\n          if (yesterdayData[k]) {\n            const { confirmed, recovered, deaths } = v;\n            latestUpdate[k] = {\n              ...v,\n              increment: {\n                confirmed: confirmed - yesterdayData[k].confirmed,\n                recovered: recovered - yesterdayData[k].recovered,\n                deaths: deaths - yesterdayData[k].deaths,\n              },\n            };    \n          }\n        });\n        latestUpdate['Worldwide'] = {\n          ...lastUpdate['Worldwide'],\n          increment: {\n            confirmed: lastUpdate.Worldwide.confirmed - worldwideInc.confirmed,\n            recovered: lastUpdate.Worldwide.recovered - worldwideInc.recovered,\n            deaths: lastUpdate.Worldwide.deaths - worldwideInc.deaths,\n          },\n        };\n        Object.assign(timeSeries, {\n          ...timeSeries,\n          Worldwide: timeSeriesWorldwide,\n        });\n        Object.keys(timeSeries).forEach(k => {\n          if (latestUpdate[k] &&  timeSeries[k]) {\n            const dLen = timeSeries[k].confirmed.length-1;\n            let del = false;\n            if (timeSeries[k].confirmed) {\n              timeSeries[k].confirmed[dLen] = latestUpdate[k].confirmed;\n            } else {\n              del = true;\n            }\n            if (timeSeries[k].recovered) {\n              timeSeries[k].recovered[dLen] = latestUpdate[k].recovered;\n            } else {\n              timeSeries[k].recovered = Array(dLen).fill(0);\n            }\n            if (timeSeries[k].deaths) {\n              timeSeries[k].deaths[dLen] = latestUpdate[k].deaths;\n            } else {\n              timeSeries[k].deaths = Array(dLen).fill(0);\n            }\n            if (del) {\n              delete timeSeries[k];\n            }\n          } else {\n            delete timeSeries[k];\n          }\n        });\n        batch(() => {\n          dispatch({ type: 'UPDATE_TIMESERIES', timeSeries });\n          dispatch({ type: 'UPDATE_LATESTUPDATE', latestUpdate });\n          dispatch({ type: 'UPDATE_FEATURES', features: geoFeatures });\n          dispatch({ type: 'UPDATE_FEATUREIDX', featureIdx });\n        });\n        dispatch({ type: 'DONE_LOADING'});\n      }\n    };\n\n    Promise.all(urls.map(u => fetch(u))).then(async res => {\n      res[0].json().then(json => {\n        if (!json.features) {\n          throw new Error('error fetch data');\n        }\n        const globData = {\n          confirmed: 0,\n          recovered: 0,\n          deaths: 0,\n          lastUpdate: new Date(),\n        };\n        json.features.forEach(f => {\n          lastUpdate[f.attributes.Country_Region] = {\n            confirmed: f.attributes.Confirmed,\n            recovered: f.attributes.Recovered,\n            deaths: f.attributes.Deaths,\n            lastUpdate: f.attributes.Last_Update,\n          };\n          globData.confirmed += f.attributes.Confirmed;\n          globData.recovered += f.attributes.Recovered;\n          globData.deaths += f.attributes.Deaths;\n        });\n        lastUpdate['Worldwide'] = {\n          ...globData,\n          lastUpdate: lastUpdate['US'].lastUpdate,\n        };\n        res[1].text().then(t => {\n          Papa.parse(t, {\n            complete: e => handleResTimeSeries({ csvData: e.data, idx: 0 }),\n          });\n          res[2].text().then(t => {\n            Papa.parse(t, {\n              complete: e => handleResTimeSeries({ csvData: e.data, idx: 1 }),\n            });\n            res[3].text().then(t => {\n              Papa.parse(t, {\n                complete: e => handleResTimeSeries({ csvData: e.data, idx: 2 }),\n              });\n              res[4].text().then(t => {\n                Papa.parse(t, {\n                  complete: e => handleResTimeSeries({ csvData: e.data, idx: 3 }),\n                });\n              }).catch(e => console.log(e));\n            }).catch(e => console.log(e));\n          }).catch(e => console.log(e));\n        }).catch(e => console.log(e));\n      }).catch(e => console.log(e));\n    }).catch(e => console.log(e));\n  }, [dispatch]);\n\n  return (\n    <>\n      {children}\n    </>\n  );\n};\n","import React from 'react';\nimport ReduxContainer from './ReduxContainer';\nimport IntlContainer from './IntlContainer';\nimport LoadingContainer from './LoadingContainer';\n\nexport default ({ children }) => (\n    <ReduxContainer>\n      <IntlContainer>\n        <LoadingContainer>\n          {children}\n        </LoadingContainer>\n      </IntlContainer>\n    </ReduxContainer>\n  );\n","import React from 'react';\nimport { Row, Col, Statistic, Card, Carousel } from 'antd';\nimport { ArrowUpOutlined } from '@ant-design/icons';\nimport { useSelector } from 'react-redux';\nimport { getFormattedMessage } from '../../utils/Formatter';\nimport './CarouselData.scss';\n\nconst CarouselData = props => {\n  const { Meta } = Card;\n  const data = useSelector(state => state.latestUpdate);\n  const isLoading = useSelector(state => state.isLoading);\n  return (\n    <>\n        {isLoading\n          ? null\n          : <Carousel effect='fade' autoplay dotPosition='bottom'>\n            {['Worldwide', 'US', 'China', 'Singapore'].map(k => (\n              <Card key={`data-card-${k}`}>\n                <Meta\n                  title={<h1>{getFormattedMessage(`area.${k}`)}</h1>}\n                  description={\n                    <Row>\n                      {['confirmed', 'recovered', 'deaths'].map(dk => {\n                        return (\n                          <Col span={8} className='text-center' key={`data-card-${k}-col-${dk}`}>\n                            <Statistic\n                              title={<h1>{getFormattedMessage(`global.${dk}`)}</h1>}\n                              value={data[k][dk]}\n                            />\n                            <Statistic\n                              className={'delta-data'}\n                              value={data[k].increment[dk]}\n                              valueStyle={{ color: dk === 'recovered' ? '#3f8600' : '#cf1322' }}\n                              prefix={<ArrowUpOutlined />}\n                            />\n                          </Col>\n                        );\n                      })}\n                    </Row>\n                  }\n                />\n              </Card>\n            ))}\n          </Carousel>\n        }\n      </>\n  );\n};\n\nexport default CarouselData;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Card } from 'antd';\nimport {\n  LineChart, Line, XAxis, YAxis, Tooltip,\n} from 'recharts';\nimport { getFormattedMessage, getFormattedDateYYYYMMDD } from '../../utils/Formatter';\n\nconst OpenLayerMapPopup = props => {\n  const { sdata, renderData: {\n    lastConfirmed,\n    lastRecovered,\n    lastDeaths,\n  } } = props;\n  const { Meta } = Card;\n  const [labels, setLabels] = useState({\n    confirmed: 'Confirmed',\n    recovered: 'Recovered',\n    deaths: 'Deaths',\n  });\n  const locale = useSelector(state => state.locale);\n  const constructTimeSeriesData = data => data.confirmed.map((_, i) => ({\n    time: data.time[i],\n    [labels.confirmed]: data.confirmed[i],\n    [labels.recovered]: data.recovered[i],\n    [labels.deaths]: data.deaths[i],\n  }));\n\n  useEffect(() => {\n    if (locale === 'en') {\n      setLabels({\n        confirmed: 'Confirmed',\n        recovered: 'Recovered',\n        deaths: 'deaths',\n      });\n    } else {\n      setLabels({\n        confirmed: '确诊',\n        recovered: '治愈',\n        deaths: '死亡',\n      });\n    }\n  }, [locale]);\n\n  return (\n    <Card\n      bodyStyle={{ padding: '5px 10px' }}\n    >\n      <Meta\n        title={\n          <>\n            {sdata.province ? getFormattedMessage(`area.${sdata.province}`, {}, sdata.province) : null}\n            {sdata.province ? ', ' : null}\n            {getFormattedMessage(`area.${sdata.country}`, {}, sdata.country)}\n          </>\n        }\n        description={\n          <div>\n            <h6>{getFormattedMessage('map.popup.latestupdate')}:</h6>\n            <h6>{getFormattedDateYYYYMMDD(new Date(sdata.lastUpdated))}</h6>\n            {lastConfirmed ? <h5>{`${labels.confirmed}: ${lastConfirmed.toLocaleString()}`}</h5> : null}\n            {lastRecovered ? <h5>{`${labels.recovered}: ${lastRecovered.toLocaleString()}`}</h5> : null}\n            {lastDeaths ? <h5>{`${labels.deaths}: ${lastDeaths.toLocaleString()}`}</h5> : null}\n            <LineChart\n              width={260}\n              height={200}\n              data={constructTimeSeriesData(sdata)}\n              margin={{ top: 4, right: 10, bottom: 0, left: -20 }}\n            >\n              <XAxis\n                type='category'\n                dataKey=\"time\"\n                tickSize={5}\n              />\n              <YAxis\n                tickFormatter={t => t >= 1000 ? `${(t / 1000)}k` : t}\n              />\n              <Tooltip\n                contentStyle={{\n                  backgroundColor: 'rgba(255, 255, 255, 0)',\n                  border: 'none',\n                }}\n              />\n              <Line\n                type=\"monotone\"\n                dataKey={labels.confirmed}\n                stroke=\"#FF6E6D\"\n                dot={false}\n              />\n              <Line\n                type=\"monotone\"\n                dataKey={labels.recovered}\n                stroke=\"#66B46A\"\n                dot={false}\n              />\n              <Line\n                type=\"monotone\"\n                dataKey={labels.deaths}\n                stroke=\"#606060\"\n                dot={false}\n              />\n            </LineChart>\n          </div>\n        }\n      />\n    </Card>\n  );\n}\n\nexport default OpenLayerMapPopup;","import React from 'react';\nimport { List } from 'antd';\nimport { useSelector } from 'react-redux';\nimport { getFormattedMessage } from '../../utils/Formatter';\n\nconst OpenLayerMapSideBar = props => {\n  const features = useSelector(state => state.features);\n  const isLoading = useSelector(state => state.isLoading);\n  const propGetter = obj => {\n    const dLen = obj.properties.confirmed.length;\n    return obj.properties.confirmed[dLen - 1].count;\n  }\n\n  const sortFeature = arr => arr.sort((a, b) => {\n    const vA = propGetter(a);\n    const vB = propGetter(b);\n    if (vA < vB) {\n        return 1;\n    } else if (vA > vB) {\n        return -1;\n    } else {\n        return 0;\n    }\n  });\n\n  return (\n    <List\n      className='data-list'\n      bordered='true'\n      loading={isLoading}\n      itemLayout='horizontal'\n      dataSource={sortFeature(features)}\n      size='small'\n      scroll={{ y: 480 }}\n      renderItem={item => {\n        const dLen = item.properties.confirmed.length;\n        const { country, province } = item.properties;\n        \n        return (\n          <List.Item\n            id={`data-list-item-${country}-${province}`}\n          >\n            <List.Item.Meta\n              title={\n                <>\n                  {province ? getFormattedMessage(`area.${province}`, {}, province) : null}{province ? ', ' : null}{getFormattedMessage(`area.${country}`, {}, country)}\n                </>\n              }\n              description={\n                <>\n                  <h6>\n                    {getFormattedMessage('global.confirmed')}: {item.properties.confirmed[dLen - 1].count}\n                  </h6>\n                  <h6>\n                    {getFormattedMessage('global.recovered')}: {item.properties.recovered[dLen - 1].count}\n                  </h6>\n                  <h6>\n                    {getFormattedMessage('global.deaths')}: {item.properties.deaths[dLen - 1].count}\n                  </h6>\n                </>\n              }\n            />\n          </List.Item>\n        );\n      }}\n    />\n  );\n};\n\nexport default OpenLayerMapSideBar;\n","import React, { useState, useEffect } from 'react';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { Tile, Group, Vector } from 'ol/layer';\nimport { OSM, Vector as VectorSource } from 'ol/source';\nimport { Circle, Fill, Style } from 'ol/style';\nimport Overlay from 'ol/Overlay';\nimport { fromLonLat } from 'ol/proj';\nimport { batch, useSelector } from 'react-redux';\nimport MapPopup from './OpenLayerMapPopup';\nimport SideBar from './OpenLayerMapSideBar';\nimport { Card, Row, Col } from 'antd';\nimport { getFormattedDateYYYYMMDD } from './../../utils/Formatter';\nimport './OpenLayerMap.scss';\n\nconst OpenLayerMap = props => {\n  const [curCoor, setCurCoor] = useState(undefined);\n  const [sdata, setSdata] = useState({});\n  const [renderData, setRenderData] = useState('');\n  const isLoading = useSelector(state => state.isLoading);\n  const features = useSelector(state => state.features);\n  const { Meta } = Card;\n  useEffect(() => {\n    if (!isLoading) {\n      const getColor = {\n        deaths: 'rgb(0,0,0, 0.5)',\n        recovered: 'rgb(0,255,0, 0.3)',\n        confirmed: 'rgb(255,0,0, 0.3)',\n      };\n      const popup = new Overlay({\n        element: document.getElementById('map-popup'),\n        autoPan: true,\n        autoPanAnimation: {\n          duration: 250,\n        }\n      });\n      const createStyle = (feature, resolution) => {\n        const radiusFactor = Math.log10(maxResolution / resolution) * 0.5 + 1;\n        // const country = feature.get('country');\n        // const province = feature.get('province');\n\n        const lastIndex = feature.get('confirmed').length - 1;\n        const confirmed = feature.get('confirmed')[lastIndex].count;\n        const recovered = feature.get('recovered')[lastIndex].count;\n        const deaths = feature.get('deaths')[lastIndex].count;\n\n        let confirmedRadius = Math.log10(confirmed + 1) * 10;\n        let recoveredRadius = Math.sqrt((recovered + deaths) / confirmed) * confirmedRadius;\n        let deathsRadius = Math.sqrt(deaths / confirmed) * confirmedRadius;\n        confirmedRadius *= radiusFactor;\n        recoveredRadius *= radiusFactor;\n        deathsRadius *= radiusFactor;\n        return [\n          new Style({\n            image: new Circle({\n              radius: confirmedRadius,\n              fill: new Fill({\n                color: getColor['confirmed']\n              }),\n            }),\n          }),\n          new Style({\n            image: new Circle({\n              radius: recoveredRadius,\n              fill: new Fill({\n                color: getColor['recovered']\n              }),\n            }),\n          }),\n          new Style({\n            image: new Circle({\n              radius: deathsRadius,\n              fill: new Fill({\n                color: getColor['deaths']\n              }),\n            }),\n          }),\n        ];\n      };\n      const calculateStats = (feature, all = false) => {\n        const country = feature.get ? feature.get('country') : feature.properties.country;\n        const province = feature.get ? feature.get('province') : feature.properties.province;\n        const confirmed = feature.get ? feature.get('confirmed') : feature.properties.confirmed;\n        const recovered = feature.get ? feature.get('recovered') : feature.properties.recovered;\n        const deaths = feature.get ? feature.get('deaths') : feature.properties.deaths;\n        const time = [];\n        const confirmedCounts = [];\n        const recoveredCounts = [];\n        const deathsCounts = [];\n\n        for (let i = 0; i <= confirmed.length - 1; i++) {\n          const c = confirmed[i].count;\n          const r = recovered[i].count;\n          const d = deaths[i].count;\n          if (all || time.length || c || r || d) {\n            time.push(getFormattedDateYYYYMMDD(confirmed[i].time))\n            confirmedCounts.push(c);\n            recoveredCounts.push(r);\n            deathsCounts.push(d);\n          }\n        };\n\n        return {\n          country: country,\n          province: province,\n          lastUpdated: Date.parse(confirmed[confirmed.length - 1].time),\n          time: time,\n          confirmed: confirmedCounts,\n          recovered: recoveredCounts,\n          deaths: deathsCounts\n        };\n      };\n\n      const showFeatureStats = (feature, coor) => {\n        showPopup(calculateStats(feature), coor);\n      };\n\n      const showPopup = (stats, coor) => {\n        const lastIndex = stats.confirmed.length - 1;\n        const lastConfirmed = stats.confirmed[lastIndex];\n        const lastRecovered = stats.recovered[lastIndex];\n        const lastDeaths = stats.deaths[lastIndex];\n        batch(() => {\n          setCurCoor(coor);\n          setSdata(stats);\n          setRenderData({\n            lastConfirmed,\n            lastRecovered,\n            lastDeaths,\n          });\n        });\n        popup.setPosition(coor);\n      }\n      const geoJsonType = new GeoJSON();\n      const vectorSource = new VectorSource({\n        format: geoJsonType,\n        features: geoJsonType.readFeatures({ type: 'FeatureCollection', features }, { featureProjection: 'EPSG:3857' })\n      });\n      const map = new Map({\n        target: 'map',\n        layers: [\n          new Group({\n            title: 'Base maps',\n            openInLayerSwitcher: true,\n            layers: [\n              new Tile({\n                title: 'Open Street',\n                baseLayer: true,\n                source: new OSM()\n              })\n            ]\n          }),\n          new Vector({\n            title: 'COVID-19 cases',\n            source: vectorSource,\n            style: (feature, resolution) => {\n              return createStyle(feature, resolution);\n            }\n          }),\n        ],\n        view: new View({\n          center: fromLonLat([-100, 35]),\n          zoom: 2,\n        }),\n        overlays: [popup],\n      });\n      const view = map.getView();\n      const maxResolution = view.getResolution();\n      map.on('pointermove', (evt) => {\n        map.getTargetElement().style.cursor = map.hasFeatureAtPixel(evt.pixel) ? 'pointer' : '';\n      });\n      map.on('singleclick', (evt) => {\n        const feature = map.forEachFeatureAtPixel(evt.pixel, (feature, _) => feature);\n        if (feature) {\n          window.location.hash = 'feature-' + feature.getId();\n          showFeatureStats(feature, evt.coordinate);\n        } else {\n          popup.setPosition(undefined);\n        }\n      });\n    }\n  }, [isLoading, features]);\n\n  return (\n    <Card loading={isLoading}>\n      {isLoading\n        ? null\n        : <Meta description={\n          <Row>\n            <Col span={20}>\n              <div id='map' className='open-layer-map' />\n              {curCoor\n                ? <div id='map-popup' className='ol-popup'>\n                  <MapPopup sdata={sdata} coor={curCoor} renderData={renderData} />\n                </div>\n                : <div id='map-popup' />\n              }\n            </Col>\n            <Col span={4}>\n              <SideBar />\n            </Col>\n          </Row>\n        }/>\n      }\n    </Card>\n  );\n};\n\nexport default OpenLayerMap;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  LineChart, Line, XAxis, YAxis, Tooltip,\n} from 'recharts';\nimport { getFormattedDateYYYYMMDD } from './../../utils/Formatter';\n\nconst DataTableChart = props => {\n  const {\n    time,\n    confirmed,\n    recovered,\n    deaths,\n  } = props;\n  const [labels, setLabels] = useState({\n    confirmed: 'Confirmed',\n    recovered: 'Recovered',\n    deaths: 'deaths',\n  });\n  const locale = useSelector(state => state.locale);\n  useEffect(() => {\n    if (locale === 'en') {\n      setLabels({\n        confirmed: 'Confirmed',\n        recovered: 'Recovered',\n        deaths: 'deaths',\n      });\n    } else {\n      setLabels({\n        confirmed: '确诊',\n        recovered: '治愈',\n        deaths: '死亡',\n      });\n    }\n  }, [locale]);\n  \n  return (\n    <LineChart\n      width={450}\n      height={300}\n      data={confirmed.map((_, i) => ({\n        time: getFormattedDateYYYYMMDD(time[i]),\n        [labels.confirmed]: confirmed[i],\n        [labels.recovered]: recovered[i],\n        [labels.deaths]: deaths[i],\n      }))}\n      margin={{ top: 16, right: 10, bottom: 4, left: -16 }}\n    >\n      <XAxis\n        type='category'\n        dataKey=\"time\"\n        tickSize={5}\n      />\n      <YAxis\n        tickFormatter={t => t >= 1000 ? `${(t / 1000)}k` : t}\n      />\n      <Tooltip\n        contentStyle={{\n          backgroundColor: 'rgba(255, 255, 255, 0)',\n          border: 'none',\n        }}\n      />\n      <Line\n        type=\"monotone\"\n        dataKey={labels.confirmed}\n        stroke=\"#FF6E6D\"\n        dot={false}\n      />\n      <Line\n        type=\"monotone\"\n        dataKey={labels.recovered}\n        stroke=\"#66B46A\"\n        dot={false}\n      />\n      <Line\n        type=\"monotone\"\n        dataKey={labels.deaths}\n        stroke=\"#606060\"\n        dot={false}\n      />\n    </LineChart>\n  );\n};\n\nexport default DataTableChart;","import React, { useState, useEffect } from 'react';\nimport { Table, Card, Popover, Button, Select, Row, Col } from 'antd';\nimport { SearchOutlined } from '@ant-design/icons';\nimport { useSelector, batch } from 'react-redux';\nimport DataTableChart from './DataTableChart';\nimport { getFormattedMessage, getFormattedDateYYYYMMDD } from './../../utils/Formatter';\n\n\nimport './DataTable.scss';\n\nconst DataTable = props => {\n  const latestUpdate = useSelector(state => state.latestUpdate);\n  const isLoading = useSelector(state => state.isLoading);\n  const timeSeries = useSelector(state => state.timeSeries);\n  const [tableData, setTableData] = useState([]);\n  const [renderData, setRenderData] = useState([]);\n  const { Meta } = Card;\n  const { Option } = Select;\n\n  const columns = [\n    {\n      title: getFormattedMessage('table.header.area'),\n      dataIndex: 'area',\n      key: 'area',\n      ellipsis: true,\n      className: 'text-nowrap',\n    },\n    {\n      title: getFormattedMessage('global.confirmed'),\n      dataIndex: 'confirmed',\n      key: 'confirmed',\n      sorter: (a, b) => a.confirmed - b.confirmed,\n      sortDirections: ['descend', 'ascend'],\n      className: 'text-nowrap',\n    },\n    {\n      title: getFormattedMessage('global.increment'),\n      dataIndex: 'increment',\n      key: 'increment',\n      sorter: (a, b) => a.increment - b.increment,\n      sortDirections: ['descend', 'ascend'],\n      className: 'text-nowrap',\n    },\n    {\n      title: getFormattedMessage('global.recovered'),\n      dataIndex: 'recovered',\n      key: 'recovered',\n      sorter: (a, b) => a.recovered - b.recovered,\n      sortDirections: ['descend', 'ascend'],\n      className: 'text-nowrap',\n    },\n    {\n      title: getFormattedMessage('global.deaths'),\n      dataIndex: 'deaths',\n      key: 'deaths',\n      sorter: (a, b) => a.deaths - b.deaths,\n      sortDirections: ['descend', 'ascend'],\n      className: 'text-nowrap',\n    },\n    {\n      title: getFormattedMessage('table.header.lastupdate'),\n      dataIndex: 'lastUpdate',\n      key: 'lastUpdate',\n      className: 'text-nowrap',\n    },\n    {\n      title: getFormattedMessage('table.header.series'),\n      dataIndex: 'timeseries',\n      key: 'timeseries',\n      className: 'text-nowrap',\n    },\n  ];\n\n  useEffect(() => {\n    if (!isLoading) {\n      const sortData = arr => arr.sort((a, b) => {\n        const vA = a.confirmed;\n        const vB = b.confirmed;\n        if (vA < vB) {\n          return 1;\n        } else if (vA > vB) {\n          return -1;\n        } else {\n          return 0;\n        }\n      });\n      const dataSource = sortData(Object.entries(latestUpdate).map(([k, v], i) => {\n        return {\n          key: `${i}`,\n          area: getFormattedMessage(`area.${k}`, {}, k),\n          confirmed: v.confirmed,\n          increment: v.increment.confirmed,\n          recovered: v.recovered,\n          deaths: v.deaths,\n          lastUpdate: getFormattedDateYYYYMMDD(new Date(v.lastUpdate)),\n          timeseries: (\n            <>\n              {timeSeries[k]\n                ? <Popover\n                  placement='topRight'\n                  content={<DataTableChart {...timeSeries[k]} />}\n                  trigger='click'\n                >\n                  <Button shape='circle' icon={<SearchOutlined />} />\n                </Popover>\n                : getFormattedMessage('table.cell.nodata')\n              }\n            </>\n          ),\n        }\n      }));\n      batch(() => {\n        setTableData(dataSource);\n        setRenderData(dataSource);\n      });\n    }\n  }, [isLoading, latestUpdate, timeSeries]);\n  return (\n    <Card loading={isLoading} bodyStyle={{ height: '1080px' }}>\n      <Meta\n        title={\n          <Row>\n            <Col className='d-flex justify-content-start align-items-center' span={6}>\n              <h6 style={{ margin: 0 }}>{getFormattedMessage('table.title.countrynum', { v1: Object.keys(latestUpdate).length })}</h6>\n            </Col>\n            <Col span={18}>\n              <Select\n                showSearch\n                bordered={false}\n                placeholder={getFormattedMessage('table.select.placeholder')}\n                style={{\n                  width: '100%',\n                }}\n                onSelect={v => v === ''\n                  ? setRenderData(tableData)\n                  : setRenderData([{\n                    key: `single-data-${v}`,\n                    area: getFormattedMessage(`area.${v}`, {}, v),\n                    confirmed: latestUpdate[v].confirmed,\n                    increment: latestUpdate[v].increment.confirmed,\n                    recovered: latestUpdate[v].recovered,\n                    deaths: latestUpdate[v].deaths,\n                    lastUpdate: getFormattedDateYYYYMMDD(new Date(latestUpdate[v].lastUpdate)),\n                    timeseries: (\n                      <>\n                        {timeSeries[v]\n                          ? <Popover\n                            placement='topRight'\n                            content={<DataTableChart {...timeSeries[v]} />}\n                            trigger='click'\n                          >\n                            <Button shape='circle' icon={<SearchOutlined />} />\n                          </Popover>\n                          : getFormattedMessage('table.cell.nodata')\n                        }\n                      </>\n                    ),\n                  }])\n                }\n              >\n                <Option key='Showall' value=''>{getFormattedMessage('table.select.showall')}</Option>\n                <Option key='Worldwide' value='Worldwide'>{getFormattedMessage('area.Worldwide')}</Option>\n                {Object.keys(latestUpdate).sort().map(k =>\n                  k === 'Worldwide' ? null : <Option key={k} value={k}>{getFormattedMessage(`area.${k}`, {}, k)}</Option>\n                )}\n              </Select>\n            </Col>\n          </Row>\n        }\n        description={\n          <Table\n            classNaame='data-table'\n            loading={isLoading}\n            dataSource={renderData}\n            columns={columns}\n            pagination={false}\n            scroll={{ y: 920 }}\n          />\n        }\n      />\n    </Card>\n  );\n};\n\nexport default DataTable;\n","import React, { useState, useEffect } from 'react';\nimport { Card, Select, Row, Col } from 'antd';\nimport { useSelector } from 'react-redux';\nimport * as clist from 'country-list';\nimport Script from 'react-load-script';\nimport { getFormattedMessage, getCapitalizedString } from './../../utils/Formatter';\n\nconst GoogleTrend = props => {\n  const { Meta } = Card;\n  const { Option } = Select;\n  const isLoading = useSelector(state => state.isLoading);\n  const [searchTime, setSearchTime] = useState('now 7-d');\n  const [searchArea, setSearchArea] = useState('');\n\n  const handleScriptLoad = ({ type, time, target, geo }) => {\n    const keyword = 'Corona Virus';\n    let query = `q=${encodeURI(keyword)}`;\n    if (geo) {\n      query += `&geo=${geo.toUpperCase()}`\n    }\n    query += `&date=${time}`;\n    window.trends.embed.renderExploreWidgetTo(\n      document.getElementById(target),\n      type,\n      {\n        comparisonItem: geo ? [{ keyword, geo: geo.toUpperCase(), time }] : [{ keyword, time }],\n        category: 0,\n        property: ''\n      },\n      {\n        exploreQuery: query,\n        guestPath: 'https://trends.google.com:443/trends/embed/'\n      }\n    );\n  };\n\n  useEffect(() => {\n    if (!isLoading) {\n      const gtTimeSeriesParent = document.getElementById('gt-time-series');\n      const gtGeoMapParent = document.getElementById('gt-geo-map');\n      if (gtTimeSeriesParent.children.length > 0 && gtGeoMapParent.children.length > 0) {\n        gtTimeSeriesParent.removeChild(gtTimeSeriesParent.children[0]);\n        gtGeoMapParent.removeChild(gtGeoMapParent.children[0]);\n        handleScriptLoad({\n          type: 'TIMESERIES',\n          keyword: 'Corona Virus',\n          target: 'gt-time-series',\n          time: searchTime,\n          geo: searchArea,\n        });\n        handleScriptLoad({\n          type: 'GEO_MAP',\n          target: 'gt-geo-map',\n          time: searchTime,\n          geo: searchArea,\n        });\n      }\n    }\n  }, [isLoading, searchTime, searchArea]);\n\n  return (\n    <Card loading={isLoading} bodyStyle={{ height: '1080px'}}>\n      <Meta\n        title={\n          <Row>\n            <Col span={12}>\n              <Select\n                showSearch\n                defaultValue='worldwide'\n                bordered={false}\n                style={{\n                  width: '100%',\n                }}\n                onChange={v => setSearchArea(clist.getNameList()[v])}\n              >\n                <Option key='worldwide' value='worldwide'>{getFormattedMessage('area.Worldwide')}</Option>\n                {Object.keys(clist.getNameList()).sort().map(k => \n                  <Option key={k} value={k}>{getFormattedMessage(`area.${getCapitalizedString(k)}`, {}, getCapitalizedString(k))}</Option>\n                )}\n              </Select>\n            </Col>\n            <Col span={12}>\n              <Select\n                defaultValue='now 7-d'\n                bordered={false}\n                style={{\n                  width: '100%',\n                }}\n                onChange={v => setSearchTime(v)}\n              >\n                <Option value='now 1-H'>{getFormattedMessage('gt.time.now 1-H')}</Option>\n                <Option value='now 4-H'>{getFormattedMessage('gt.time.now 4-H')}</Option>\n                <Option value='now 1-d'>{getFormattedMessage('gt.time.now 1-d')}</Option>\n                <Option value='now 7-d'>{getFormattedMessage('gt.time.now 7-d')}</Option>\n                <Option value='today 1-m'>{getFormattedMessage('gt.time.today 1-m')}</Option>\n                <Option value='today 3-m'>{getFormattedMessage('gt.time.today 3-m')}</Option>\n                <Option value='today 12-m'>{getFormattedMessage('gt.time.today 12-m')}</Option>\n              </Select>\n            </Col>\n          </Row>\n        }\n        description={\n          <Row>\n            <Col id='gt-time-series' span={24}>\n              <Script\n                url='https://ssl.gstatic.com/trends_nrtr/2051_RC11/embed_loader.js'\n                onLoad={() => handleScriptLoad({\n                  type: 'TIMESERIES',\n                  keyword: 'Corona Virus',\n                  target: 'gt-time-series',\n                  time: searchTime,\n                })}\n              />\n            </Col>\n            <Col id='gt-geo-map' span={24}>\n              <Script\n                url='https://ssl.gstatic.com/trends_nrtr/2051_RC11/embed_loader.js'\n                onLoad={() => handleScriptLoad({\n                  type: 'GEO_MAP',\n                  target: 'gt-geo-map',\n                  time: searchTime,\n                })}\n              />\n            </Col>\n          </Row>\n        }\n      />\n    </Card>\n  );\n}\n\nexport default GoogleTrend;\n","import React from 'react';\nimport { Tooltip, BackTop } from 'antd';\nimport { getFormattedMessage } from './../../utils/Formatter';\n\nexport default props => (\n  <Tooltip\n    placement='left'\n    title={getFormattedMessage('affix.backtotop')}\n    mouseEnterDelay={0.5}\n  >\n    <BackTop />\n  </Tooltip>\n);","import React from 'react';\nimport { Affix, Tooltip, Button, Row, Col } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFormattedMessage } from './../../utils/Formatter';\n\nexport default props => {\n  const dispatch = useDispatch();\n  const locale = useSelector(state => state.locale);\n\n  return (\n    <Affix offsetBottom={148}>\n      <Row>\n        <Col className='affix-col' span={24}>\n          <Tooltip\n            placement='left'\n            title={getFormattedMessage('affix.lang')}\n            mouseEnterDelay={0.5}\n          >\n            <Button\n              className='affix-btn-lang'\n              shape='circle'\n              onClick={() => {\n                locale === 'en'\n                ? dispatch({ type: 'SET_LOCALE', locale: 'zh' })\n                : dispatch({ type: 'SET_LOCALE', locale: 'en' });\n                document.activeElement.blur();\n              }}\n            >\n              <b>{locale === 'en' ? '中' : 'En'}</b>\n            </Button>\n          </Tooltip>\n        </Col>\n      </Row>\n    </Affix>\n  );\n};\n","import React from 'react';\nimport { Affix, Tooltip, Button, Row, Col } from 'antd';\nimport { GithubOutlined } from '@ant-design/icons';\nimport { getFormattedMessage } from './../../utils/Formatter';\n\nexport default props => {\n  return (\n    <Affix offsetBottom={100}>\n      <Row>\n        <Col className='affix-col' span={24}>\n          <Tooltip\n            placement='left'\n            title={getFormattedMessage('affix.github')}\n            mouseEnterDelay={0.5}\n          >\n            <Button\n              className='affix-btn-github'\n              shape='circle'\n              href='https://github.com/ysg00/covid-19'\n            >\n              <GithubOutlined height={24} width={24} />\n            </Button>\n          </Tooltip>\n        </Col>\n      </Row>\n    </Affix>\n  );\n};\n","import React from 'react';\nimport BackToTop from './BackToTop';\nimport LangSwitch from './LangSwitch';\nimport RedirectToGithub from './RedirectToGithub';\nimport './index.scss';\n\nexport default props => (\n  <>\n    <BackToTop />\n    <LangSwitch />\n    <RedirectToGithub />\n  </>\n);","import React from 'react';\nimport { Layout, Row, Col } from 'antd';\nimport MainContainer from './containers';\nimport CarouselData from './components/CarouselData/CarouselData';\nimport OpenLayerMap from './components/OpenLayerMap/OpenLayerMap';\nimport DataTable from './components/DataTable/DataTable';\nimport GoogleTrend from './components/GoogleTrend/GoogleTrend';\n// import WorldwideChart from './components/WorldwideChart/WorldwideChart';\nimport Affixes from './components/Affixes';\nimport { getFormattedMessage }from './utils/Formatter';\nimport './App.scss';\n\nconst App = props => {\n  const { Header, Content, Footer } = Layout;\n  return (\n    <MainContainer>\n      <Layout id='app'>\n        <Header>\n          <h1 style={{ color: 'white' }}>Covid-19</h1>\n        </Header>\n        <Content style={{ padding: '0 50px' }}>\n          <Row justify='center'>\n            <Col id='main-content' span={20}>\n              <CarouselData />\n              <OpenLayerMap />\n              <Row>\n                <Col span={18}>\n                  <DataTable />\n                </Col>\n                <Col span={6}>\n                  <GoogleTrend />\n                </Col>\n              </Row>\n              {/* <WorldwideChart /> */}\n            </Col>\n          </Row>\n        </Content>\n        <Footer>\n          <Row>\n            <Col offset={2}>\n              {getFormattedMessage('app.footer.datasource')}\n              <br />\n              <a href='https://github.com/CSSEGISandData/COVID-19'>https://github.com/CSSEGISandData/COVID-19</a>\n            </Col>\n          </Row>\n        </Footer>\n        <Affixes />\n      </Layout>\n    </MainContainer>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}